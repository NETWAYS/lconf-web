<?xml version="1.0" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Gettext - Javascript implemenation of GNU Gettext API.</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<link rev="made" href="mailto:root@localhost" />
</head>

<body style="background-color: white">

<p><a name="__index__"></a></p>
<!-- INDEX BEGIN -->

<ul>

	<li><a href="#name">NAME</a></li>
	<li><a href="#synopsis">SYNOPSIS</a></li>
	<li><a href="#description">DESCRIPTION</a></li>
	<li><a href="#install">INSTALL</a></li>
	<li><a href="#configuration">CONFIGURATION</a></li>
	<li><a href="#methods">METHODS</a></li>
	<ul>

		<li><a href="#new_gettext__args_">new Gettext (args)</a></li>
		<li><a href="#textdomain__domain__">textdomain( domain )</a></li>
	</ul>

	<li><a href="#notes">NOTES</a></li>
	<li><a href="#bugs___todo">BUGS / TODO</a></li>
	<li><a href="#requires">REQUIRES</a></li>
	<li><a href="#see_also">SEE ALSO</a></li>
	<li><a href="#author">AUTHOR</a></li>
</ul>
<!-- INDEX END -->

<hr />
<p>
</p>
<h1><a name="name">NAME</a></h1>
<p>Javascript Gettext - Javascript implemenation of GNU Gettext API.</p>
<p>
</p>
<hr />
<h1><a name="synopsis">SYNOPSIS</a></h1>
<pre>
 // //////////////////////////////////////////////////////////
 // Optimum caching way
 &lt;script language=&quot;javascript&quot; src=&quot;/path/LC_MESSAGES/myDomain.json&quot;&gt;&lt;/script&gt;
 &lt;script language=&quot;javascript&quot; src=&quot;/path/Gettext.js'&gt;&lt;/script&gt;</pre>
<pre>
 // assuming myDomain.json defines variable json_locale_data
 var params = {  &quot;domain&quot; : &quot;myDomain&quot;,
                 &quot;locale_data&quot; : json_locale_data
              };
 var gt = new Gettext(params);
 // create a shortcut if you'd like
 function _ (msgid) { return gt.gettext(msgid); }
 alert(_(&quot;some string&quot;));
 // or use fully named method
 alert(gt.gettext(&quot;some string&quot;));
 // change to use a different &quot;domain&quot;
 gt.textdomain(&quot;anotherDomain&quot;);
 alert(gt.gettext(&quot;some string&quot;));</pre>
<pre>
 // //////////////////////////////////////////////////////////
 // The other way to load the language lookup is a &quot;link&quot; tag
 // Downside is that the data won't be cached
 // Upside is that it's easy to specify multiple files
 &lt;link rel=&quot;gettext&quot; uri=&quot;/path/LC_MESSAGES/myDomain.json&quot; /&gt;
 &lt;script language=&quot;javascript&quot; src=&quot;/path/Gettext.js'&gt;&lt;/script&gt;</pre>
<pre>
 var gt = new Gettext({ &quot;domain&quot; : &quot;myDomain&quot; });
 // rest is the same</pre>
<pre>
 // //////////////////////////////////////////////////////////
 // The reson the shortcuts aren't exported by default is because they'd be
 // glued to the single domain you created. So, if you're adding i18n support
 // to some js library, you should use it as so:</pre>
<pre>
 if (typeof(MyNamespace) == 'undefined') MyNamespace = {};
 MyNamespace.MyClass = function () {
     var gtParms = { &quot;domain&quot; : 'MyNamespace_MyClass' };
     this.gt = new Gettext(gtParams);
     return this;
 };
 MyNamespace.MyClass.prototype._ = function (msgid) {
     return this.gt.gettext(msgid);
 };
 MyNamespace.MyClass.prototype.something = function () {
     var myString = this._(&quot;this will get translated&quot;);
 };</pre>
<pre>
 // //////////////////////////////////////////////////////////
 // Adding the shortcuts to a global scope is easier. If that's
 // ok in your app, this is certainly easier.
 var myGettext = new Gettext({ 'domain' : 'myDomain' });
 function _ (msgid) {
     return myGettext.gettext(msgid);
 }
 alert( _(&quot;text&quot;) );</pre>
<pre>
 // //////////////////////////////////////////////////////////
 // Data structure of the json data
 // NOTE: if you're loading via the &lt;script&gt; tag, you can only
 // load one file, but it can contain multiple domains.
 var json_locale_data = {
     &quot;MyDomain&quot; : {
         &quot;&quot; : {
             &quot;header_key&quot; : &quot;header value&quot;,
             &quot;header_key&quot; : &quot;header value&quot;,
         &quot;msgid&quot; : [ &quot;msgid_plural&quot;, &quot;msgstr&quot;, &quot;msgstr_plural&quot;, &quot;msgstr_pluralN&quot; ],
         &quot;msgctxt\004msgid&quot; : [ &quot;&quot;, &quot;msgstr&quot; ],
         },
     &quot;AnotherDomain&quot; : {
         },
     }</pre>
<p>
</p>
<hr />
<h1><a name="description">DESCRIPTION</a></h1>
<p>This is a javascript implementation of GNU Gettext, providing internationalization support for javascript. It differs from existing javascript implementations in that it will support all current Gettext features (ex. plural and context support), and will also support loading language catalogs from .mo, .po, or preprocessed json files (converter included).</p>
<p>The locale initialization differs from that of GNU Gettext / POSIX. Rather than setting the category, domain, and paths, and letting the libs find the right file, you must explicitly load the file at some point. The ``domain'' will still be honored. Future versions may be expanded to include support for set_locale like features.</p>
<p>
</p>
<hr />
<h1><a name="install">INSTALL</a></h1>
<p>To install this module, simply copy the file lib/Gettext.js to a web accessable location, and reference it from your application.</p>
<p>
</p>
<hr />
<h1><a name="configuration">CONFIGURATION</a></h1>
<p>Configure in one of two ways:</p>
<ol>
<li><strong><a name="item_optimal_2e_load_language_definition_from_staticall">Optimal. Load language definition from statically defined json data.</a></strong>

<pre>
    &lt;script language=&quot;javascript&quot; src=&quot;/path/locale/domain.json&quot;&gt;&lt;/script&gt;</pre>
<pre>
    // in domain.json
    json_locale_data = {
        &quot;mydomain&quot; : {
            // po header fields
            &quot;&quot; : {
                &quot;plural-forms&quot; : &quot;...&quot;,
                &quot;lang&quot; : &quot;en&quot;,
                },
            // all the msgid strings and translations
            &quot;msgid&quot; : [ &quot;msgid_plural&quot;, &quot;translation&quot;, &quot;plural_translation&quot; ],
        },
    };
    // please see the included po2json script for the details on this format</pre>
<p>This method also allows you to use unsupported file formats, so long as you can parse them into the above format.</p>
<li><strong><a name="item_use_ajax_to_load_language_file_2e">Use AJAX to load language file.</a></strong>

<p>Use XMLHttpRequest (actually, SJAX - syncronous) to load an external resource.</p>
<p>Supported external formats are:</p>
<ul>
<li><strong><a name="item_notation">Javascript Object Notation (.json)</a></strong>

<p>(see po2json)</p>
<pre>
    type=application/json</pre>
</li>
<li><strong><a name="item_object">Machine Object (compiled .po) (.mo)</a></strong>

<p>(see GNU Gettext's msgfmt)</p>
<pre>
    type=application/x-mo</pre>
</li>
<li><strong>Uniforum Portable Object (.po)</strong>

<p>(see GNU Gettext's xgettext)</p>
<pre>
    type=application/x-po</pre>
</li>
</ul>
</ol>
<p>
</p>
<hr />
<h1><a name="methods">METHODS</a></h1>
<p>The following methods are implemented:</p>
<pre>
    new Gettext(args)
    textdomain
    gettext
    dgettext
    dcgettext
    ngettext
    dngettext
    dcngettext
    pgettext
    dpgettext
    dcpgettext
    npgettext
    dnpgettext
    dcnpgettext</pre>
<p>
</p>
<h2><a name="new_gettext__args_">new Gettext (args)</a></h2>
<p>Several methods of loading locale data are included. You may specify a plugin or alternative method of loading data by passing the data in as the ``locale_data'' option. For example:</p>
<pre>
    var get_locale_data = function () {
        // plugin does whatever to populate locale_data
        return locale_data;
    };
    var gt = new Gettext( 'domain' : 'messages',
                          'locale_data' : get_locale_data() );</pre>
<p>The above can also be used if locale data is specified in a statically included &lt;SCRIPT&gt; tag. Just specify the variable name in the call to new. Ex:</p>
<pre>
    var gt = new Gettext( 'domain' : 'messages',
                          'locale_data' : json_locale_data_variable );</pre>
<p>Finally, you may load the locale data by referencing it in a &lt;LINK&gt; tag. Simply exclude the 'locale_data' option, and all &lt;LINK rel=``gettext'' ...&gt; items will be tried. The &lt;LINK&gt; should be specified as:</p>
<pre>
    &lt;link rel=&quot;gettext&quot; type=&quot;application/json&quot; url=&quot;/path/to/file.json&quot;&gt;
    &lt;link rel=&quot;gettext&quot; type=&quot;text/javascript&quot;  url=&quot;/path/to/file.json&quot;&gt;
    &lt;link rel=&quot;gettext&quot; type=&quot;application/x-po&quot; url=&quot;/path/to/file.po&quot;&gt;
    &lt;link rel=&quot;gettext&quot; type=&quot;application/x-mo&quot; url=&quot;/path/to/file.mo&quot;&gt;</pre>
<p>args:</p>
<dl>
<dt><strong><a name="item_domain">domain</a></strong>

<dd>
<p>The Gettext domain, not www.whatev.com. It's usually your applications basename. If the .po file was ``myapp.po'', this would be ``myapp''.</p>
</dd>
</li>
<dt><strong><a name="item_locale_data">locale_data</a></strong>

<dd>
<p>Raw locale data (in json structure). If specified, from_link data will be ignored.</p>
</dd>
</li>
</dl>
<p>
</p>
<h2><a name="textdomain__domain__">textdomain( domain )</a></h2>
<p>Set domain for future <code>gettext()</code> calls</p>
<p>A  message  domain  is  a  set of translatable msgid messages. Usually,
every software package has its own message domain. The domain  name  is
used to determine the message catalog where a translation is looked up;
it must be a non-empty string.</p>
<p>The current message domain is used by the gettext, ngettext, pgettext,
npgettext functions, and by the dgettext, dcgettext, dngettext, dcngettext,
dpgettext, dcpgettext, dnpgettext and dcnpgettext functions when called
with a NULL domainname argument.</p>
<p>If domainname is not NULL, the current message domain is set to domain‐
name.</p>
<p>If domainname is undefined, null, or empty string, the function returns
the current message domain.</p>
<p>If  successful,  the  textdomain  function  returns the current message
domain, after possibly changing it. (ie. if you set a new domain, the 
value returned will NOT be the previous domain).</p>
<p>
</p>
<hr />
<h1><a name="notes">NOTES</a></h1>
<p>These are some notes on the internals</p>
<dl>
<dt><strong><a name="item_locale_caching">LOCALE CACHING</a></strong>

<dd>
<p>Loaded locale data is currently cached class-wide. This means that if two scripts are both using Gettext.js, and both share the same gettext domain, that domain will only be loaded once. This will allow you to grab a new object many times from different places, utilize the same domain, and share a single translation file. The downside is that a domain won't be RE-loaded if a new object is instantiated on a domain that had already been instantiated.</p>
</dd>
</li>
</dl>
<p>
</p>
<hr />
<h1><a name="bugs___todo">BUGS / TODO</a></h1>
<dl>
<dt><strong><a name="item_error_handling">error handling</a></strong>

<dd>
<p>Currently, there are several places that throw errors. In GNU Gettext, there are no fatal errors, which allows text to still be displayed regardless of how broken the environment becomes. We should evaluate and determine where we want to stand on that issue.</p>
</dd>
</li>
<dt><strong><a name="item_support">syncronous only support (no ajax support)</a></strong>

<dd>
<p>Currently, fetching language data is done purely syncronous, which means the page will halt while those files are fetched/loaded.</p>
</dd>
<dd>
<p>This is often what you want, as then following translation requests will actually be translated. However, if all your calls are done dynamically (ie. error handling only or something), loading in the background may be more adventagous.</p>
</dd>
<dd>
<p>It's still recommended to use the statically defined &lt;script ...&gt; method, which should have the same delay, but it will cache the result.</p>
</dd>
</li>
<dt><strong><a name="item_domain_support">domain support</a></strong>

<dd>
<p>domain support. We need to figure out how we're going to handle that across the board.</p>
</dd>
<dd>
<p>In CCMS, with the i18n calls, they currently do nothing to distinguish between domains. For that, saying ``hey, it's all 'ccms''' may be ok (though zoneinfo would be nice to separate out).</p>
</dd>
<dd>
<p>In javascript, we run into a problem, because the namespace is essentially global. If we create a new i18n object, and use that, then that'd be ok... but that means a different calling convention than everthing else. The problem really lies with making the shortcuts ( <code>_(``str'')</code> or <code>i18n(``str'')</code> ).</p>
</dd>
<dd>
<p>Maybe we can force our apps to do:
    this.i18n(``str'')</p>
</dd>
<dd>
<p>In our i18n wrapper lib, we could do the API like this:</p>
</dd>
<dd>
<pre>
    // in some other .js file that needs i18n
    this.i18nObj = new i18n;
    this.i18n = this.i18nObj.init('domain');</pre>
</dd>
<dd>
<p>This really goes back to the crazy setup stuff that happens in all of these, and I'm basically trying to reinvent the wheel so it fits in javascript.</p>
</dd>
</li>
<dt><strong><a name="item_encoding">encoding</a></strong>

<dd>
<p>May want to add encoding/reencoding stuff.</p>
</dd>
</li>
</dl>
<p>
</p>
<hr />
<h1><a name="requires">REQUIRES</a></h1>
<p>po2json requires perl, and the perl modules Locale::PO and JSON.</p>
<p>
</p>
<hr />
<h1><a name="see_also">SEE ALSO</a></h1>
<p>Locale::gettext_pp(3pm), POSIX(3pm), gettext(1), gettext(3),
examples/normal/index.html,
examples/wrapper/i18n.html, examples/wrapper/i18n.js</p>
<p>
</p>
<hr />
<h1><a name="author">AUTHOR</a></h1>
<p>Copyright (C) 2008, Joshua I. Miller &lt;<a href="mailto:unrtst@cpan.org">unrtst@cpan.org</a>&gt;, all rights reserved. See the source code for details.</p>

</body>

</html>
