<?php

// This is a compiled Agavi configuration file
// Compiled from: /usr/local/lconf-standalone/app/config/compile.xml
// Generated by: AgaviCompileConfigHandler
// Date: 2011-09-02T13:02:09+0000

abstract class AgaviAttributeHolder extends AgaviParameterHolder
{
protected $attributes = array();
protected $defaultNamespace = 'org.agavi';
public function getDefaultNamespace()
{
return $this->defaultNamespace;
}
public function clearAttributes()
{
$this->attributes = array();
}
public function &getAttribute($name, $ns = null, $default = null)
{
if($ns === null) {
$ns = $this->defaultNamespace;
}
if(isset($this->attributes[$ns])) {
if(isset($this->attributes[$ns][$name]) || array_key_exists($name, $this->attributes[$ns])) {
return $this->attributes[$ns][$name];
}
try {
return AgaviArrayPathDefinition::getValue($name, $this->attributes[$ns], $default);
} catch(InvalidArgumentException $e) {
return $default;
}
}
return $default;
}
public function getAttributeNames($ns = null)
{
if($ns === null) {
$ns = $this->defaultNamespace;
}
if(isset($this->attributes[$ns])) {
return array_keys($this->attributes[$ns]);
}
}
public function getFlatAttributeNames($ns = null)
{
if($ns === null) {
$ns = $this->defaultNamespace;
}
if(isset($this->attributes[$ns])) {
return AgaviArrayPathDefinition::getFlatKeyNames($this->attributes[$ns]);
}
}
public function &getAttributes($ns = null)
{
if($ns === null) {
$ns = $this->defaultNamespace;
}
$retval = array();
if(isset($this->attributes[$ns])) {
$retval =& $this->attributes[$ns];
}
return $retval;
}
public function &getAttributeNamespace($ns = null)
{
if($ns === null) {
$ns = $this->defaultNamespace;
}
$retval = null;
if(isset($this->attributes[$ns])) {
$retval =& $this->attributes[$ns];
}
return $retval;
}
public function getAttributeNamespaces()
{
return array_keys($this->attributes);
}
public function hasAttribute($name, $ns = null)
{
if($ns === null) {
$ns = $this->defaultNamespace;
}
if(isset($this->attributes[$ns])) {
if(isset($this->attributes[$ns][$name]) || array_key_exists($name, $this->attributes[$ns])) {
return true;
}
try {
return AgaviArrayPathDefinition::hasValue($name, $this->attributes[$ns]);
} catch(InvalidArgumentException $e) {
return false;
}
}
return false;
}
public function hasAttributeNamespace($ns)
{
return isset($this->attributes[$ns]);
}
public function &removeAttribute($name, $ns = null)
{
if($ns === null) {
$ns = $this->defaultNamespace;
}
$retval = null;
if(isset($this->attributes[$ns])) {
if(isset($this->attributes[$ns][$name]) || array_key_exists($name, $this->attributes[$ns])) {
$retval =& $this->attributes[$ns][$name];
unset($this->attributes[$ns][$name]);
} else {
try {
$retval =& AgaviArrayPathDefinition::unsetValue($name, $this->attributes[$ns]);
} catch(InvalidArgumentException $e) {
}
}
}
return $retval;
}
public function removeAttributeNamespace($ns)
{
$retval = null;
if(isset($this->attributes[$ns])) {
$retval =& $this->attributes[$ns];
unset($this->attributes[$ns]);
}
return $retval;
}
public function setAttribute($name, $value, $ns = null)
{
if($ns === null) {
$ns = $this->defaultNamespace;
}
if(!isset($this->attributes[$ns])) {
$this->attributes[$ns] = array();
}
$this->attributes[$ns][$name] = $value;
}
public function appendAttribute($name, $value, $ns = null)
{
if($ns === null) {
$ns = $this->defaultNamespace;
}
if(!isset($this->attributes[$ns])) {
$this->attributes[$ns] = array();
}
if(!isset($this->attributes[$ns][$name]) || !is_array($this->attributes[$ns][$name])) {
settype($this->attributes[$ns][$name], 'array');
}
$this->attributes[$ns][$name][] = $value;
}
public function setAttributeByRef($name, &$value, $ns = null)
{
if($ns === null) {
$ns = $this->defaultNamespace;
}
if(!isset($this->attributes[$ns])) {
$this->attributes[$ns] = array();
}
$this->attributes[$ns][$name] =& $value;
}
public function appendAttributeByRef($name, &$value, $ns = null)
{
if($ns === null) {
$ns = $this->defaultNamespace;
}
if(!isset($this->attributes[$ns])) {
$this->attributes[$ns] = array();
}
if(!isset($this->attributes[$ns][$name]) || !is_array($this->attributes[$ns][$name])) {
settype($this->attributes[$ns][$name], 'array');
}
$this->attributes[$ns][$name][] =& $value;
}
public function setAttributes(array $attributes, $ns = null)
{
if($ns === null) {
$ns = $this->defaultNamespace;
}
if(!isset($this->attributes[$ns])) {
$this->attributes[$ns] = array();
}
$this->attributes[$ns] = $attributes + $this->attributes[$ns];
}
public function setAttributesByRef(array &$attributes, $ns = null)
{
if($ns === null) {
$ns = $this->defaultNamespace;
}
if(!isset($this->attributes[$ns])) {
$this->attributes[$ns] = array();
}
foreach($attributes as $key => &$value) {
$this->attributes[$ns][$key] =& $value;
}
}
}
abstract class AgaviAction
{
protected $container = null;
protected $context = null;
public final function getContext()
{
return $this->context;
}
public final function getContainer()
{
return $this->container;
}
public function getCredentials()
{
return null;
}
public function handleError(AgaviRequestDataHolder $rd)
{
return 'Error';
}
public function initialize(AgaviExecutionContainer $container)
{
$this->container = $container;
$this->context = $container->getContext();
}
public function isSecure()
{
return false;
}
public function isSimple()
{
return false;
}
public function registerValidators()
{
}
public function validate(AgaviRequestDataHolder $rd)
{
return true;
}
public function getDefaultViewName()
{
return 'Input';
}
public function clearAttributes()
{
$this->container->clearAttributes();
}
public function &getAttribute($name, $default = null)
{
return $this->container->getAttribute($name, null, $default);
}
public function getAttributeNames()
{
return $this->container->getAttributeNames();
}
public function &getAttributes()
{
return $this->container->getAttributes();
}
public function hasAttribute($name)
{
return $this->container->hasAttribute($name);
}
public function &removeAttribute($name)
{
return $this->container->removeAttribute($name);
}
public function setAttribute($name, $value)
{
$this->container->setAttribute($name, $value);
}
public function appendAttribute($name, $value)
{
$this->container->appendAttribute($name, $value);
}
public function setAttributeByRef($name, &$value)
{
$this->container->setAttributeByRef($name, $value);
}
public function appendAttributeByRef($name, &$value)
{
$this->container->appendAttributeByRef($name, $value);
}
public function setAttributes(array $attributes)
{
$this->container->setAttributes($attributes);
}
public function setAttributesByRef(array &$attributes)
{
$this->container->setAttributesByRef($attributes);
}
}
class AgaviContext
{
protected $name = '';
protected $controller = null;
protected $factories = array(
'dispatch_filter' => null,
'execution_container' => null,
'execution_filter' => null,
'filter_chain' => null,
'response' => null,
'security_filter' => null,
'validation_manager' => null,
);
protected $databaseManager = null;
protected $loggerManager = null;
protected $request = null;
protected $routing = null;
protected $storage = null;
protected $translationManager = null;
protected $user = null;
protected $shutdownSequence = array();
protected static $instances = array();
protected $singletonModelInstances = array();
public function __clone()
{
trigger_error('Cloning an AgaviContext instance is not allowed.', E_USER_ERROR);
}
protected function __construct($name)
{
$this->name = $name;
}
public function __toString()
{
return $this->getName();
}
public function getFactoryInfo($for)
{
if(isset($this->factories[$for])) {
return $this->factories[$for];
}
}
public function createInstanceFor($for)
{
$info = $this->getFactoryInfo($for);
if(null === $info) {
throw new AgaviException(sprintf('No factory info for "%s"', $for));
}
$class = new $info['class']();
$class->initialize($this, $info['parameters']);
return $class;
}
public function getController()
{
return $this->controller;
}
public function getDatabaseConnection($name = null)
{
if($this->databaseManager !== null) {
return $this->databaseManager->getDatabase($name)->getConnection();
}
}
public function getDatabaseManager()
{
return $this->databaseManager;
}
public static function getInstance($profile = null)
{
try {
if($profile === null) {
$profile = AgaviConfig::get('core.default_context');
if($profile === null) {
throw new AgaviException('You must supply a context name to AgaviContext::getInstance() or set the name of the default context to be used in the configuration directive "core.default_context".');
}
}
$profile = strtolower($profile);
if(!isset(self::$instances[$profile])) {
$class = AgaviConfig::get('core.context_implementation', __CLASS__);
self::$instances[$profile] = new $class($profile);
self::$instances[$profile]->initialize();
}
return self::$instances[$profile];
} catch(Exception $e) {
AgaviException::render($e);
}
}
public function getLoggerManager()
{
return $this->loggerManager;
}
public function initialize()
{
try {
include(AgaviConfigCache::checkConfig(AgaviConfig::get('core.config_dir') . '/factories.xml', $this->name));
} catch(Exception $e) {
AgaviException::render($e, $this);
}
register_shutdown_function(array($this, 'shutdown'));
}
public function shutdown()
{
foreach($this->shutdownSequence as $object) {
$object->shutdown();
}
}
public function getModel($modelName, $moduleName = null, array $parameters = null)
{
$origModelName = $modelName;
$modelName = AgaviToolkit::canonicalName($modelName);
$class = str_replace('/', '_', $modelName) . 'Model';
$file = null;
$rc = null;
if($moduleName === null) {
if(!class_exists($class)) {
$file = AgaviConfig::get('core.model_dir') . '/' . $modelName . 'Model.class.php';
}
} else {
try {
$this->controller->initializeModule($moduleName);
} catch(AgaviDisabledModuleException $e) {
}
$class = $moduleName . '_' . $class;
if(!class_exists($class)) {
$file = AgaviConfig::get('core.module_dir') . '/' . $moduleName . '/models/' . $modelName . 'Model.class.php';
}
}
if(null !== $file && is_readable($file)) {
require($file);
}
if(!class_exists($class)) {
throw new AgaviAutoloadException(sprintf("Couldn't find class for Model %s", $origModelName));
}
$rc = new ReflectionClass($class);
if($rc->implementsInterface('AgaviISingletonModel')) {
if(!isset($this->singletonModelInstances[$class])) {
if($parameters === null || $rc->getConstructor() === null) {
$this->singletonModelInstances[$class] = new $class();
} else {
$this->singletonModelInstances[$class] = $rc->newInstanceArgs($parameters);
}
}
$model = $this->singletonModelInstances[$class];
} else {
if($parameters === null || $rc->getConstructor() === null) {
$model = new $class();
} else {
$model = $rc->newInstanceArgs($parameters);
}
}
if(is_callable(array($model, 'initialize'))) {
$model->initialize($this, (array) $parameters);
}
return $model;
}
public function getName()
{
return $this->name;
}
public function getRequest()
{
return $this->request;
}
public function getRouting()
{
return $this->routing;
}
public function getStorage()
{
return $this->storage;
}
public function getTranslationManager()
{
return $this->translationManager;
}
public function getUser()
{
return $this->user;
}
}
class AgaviController extends AgaviParameterHolder
{
protected $numExecutions = 0;
protected $context = null;
protected $response = null;
protected $filters = array(
'global' => array(),
'action' => array(
'*' => null
),
'dispatch' => null,
'execution' => null,
'security' => null
);
protected $defaultOutputType = null;
protected $outputTypes = array();
private $requestData = null;
public function countExecution()
{
$maxExecutions = $this->getParameter('max_executions');
if(++$this->numExecutions > $maxExecutions && $maxExecutions > 0) {
throw new AgaviControllerException('Too many execution runs have been detected for this Context.');
}
}
public function createExecutionContainer($moduleName = null, $actionName = null, AgaviRequestDataHolder $arguments = null, $outputType = null, $requestMethod = null)
{
$container = $this->context->createInstanceFor('execution_container');
$container->setModuleName($moduleName);
$container->setActionName($actionName);
$container->setRequestData($this->requestData);
if($arguments !== null) {
$container->setArguments($arguments);
}
$container->setOutputType($this->context->getController()->getOutputType($outputType));
if($requestMethod === null) {
$requestMethod = $this->context->getRequest()->getMethod();
}
$container->setRequestMethod($requestMethod);
return $container;
}
public function initializeModule($moduleName)
{
$lowerModuleName = strtolower($moduleName);
if(null === AgaviConfig::get('modules.' . $lowerModuleName . '.enabled')) {
AgaviConfig::fromArray(array(
'modules.' . $lowerModuleName . '.agavi.action.path' => '%core.module_dir%/${moduleName}/actions/${actionName}Action.class.php',
'modules.' . $lowerModuleName . '.agavi.cache.path' => '%core.module_dir%/${moduleName}/cache/${actionName}.xml',
'modules.' . $lowerModuleName . '.agavi.template.directory' => '%core.module_dir%/${module}/templates',
'modules.' . $lowerModuleName . '.agavi.validate.path' => '%core.module_dir%/${moduleName}/validate/${actionName}.xml',
'modules.' . $lowerModuleName . '.agavi.view.path' => '%core.module_dir%/${moduleName}/views/${viewName}View.class.php',
'modules.' . $lowerModuleName . '.agavi.view.name' => '${actionName}${viewName}',
));
if(is_readable(AgaviConfig::get('core.module_dir') . '/' . $moduleName . '/config/module.xml')) {
include_once(AgaviConfigCache::checkConfig(AgaviConfig::get('core.module_dir') . '/' . $moduleName . '/config/module.xml'));
} else {
AgaviConfig::set('modules.' . $lowerModuleName . '.enabled', true);
}
$moduleAutoload = AgaviConfig::get('core.module_dir') . '/' . $moduleName . '/config/autoload.xml';
if(is_readable($moduleAutoload)) {
Agavi::$autoloads = array_merge(Agavi::$autoloads, include(AgaviConfigCache::checkConfig($moduleAutoload)));
}
if(AgaviConfig::get('modules.' . $lowerModuleName . '.enabled')) {
$moduleConfigHandlers = AgaviConfig::get('core.module_dir') . '/' . $moduleName . '/config/config_handlers.xml';
if(is_readable($moduleConfigHandlers)) {
AgaviConfigCache::addConfigHandlersFile($moduleConfigHandlers);
}
}
}
if(!AgaviConfig::get('modules.' . $lowerModuleName . '.enabled')) {
throw new AgaviDisabledModuleException(sprintf('The module "%1$s" is disabled.', $moduleName));
}
$moduleConfig = AgaviConfig::get('core.module_dir') . '/' . $moduleName . '/config.php';
if(is_readable($moduleConfig)) {
require_once($moduleConfig);
}
}
public function dispatch(AgaviRequestDataHolder $arguments = null, AgaviExecutionContainer $container = null)
{
try {
$rq = $this->context->getRequest();
$rd = $rq->getRequestData();
if($container === null) {
$container = $this->context->getRouting()->execute();
}
if($container instanceof AgaviExecutionContainer) {
if($arguments !== null) {
$rd->merge($arguments);
}
$moduleName = $container->getModuleName();
$actionName = $container->getActionName();
if(!$moduleName) {
$ma = $rq->getParameter('module_accessor');
$aa = $rq->getParameter('action_accessor');
if($rd->hasParameter($ma) && $rd->hasParameter($aa)) {
$moduleName = $rd->getParameter($ma);
$actionName = $rd->getParameter($aa);
} else {
$moduleName = AgaviConfig::get('actions.default_module');
$actionName = AgaviConfig::get('actions.default_action');
}
$container->setModuleName($moduleName);
$container->setActionName($actionName);
}
if(!AgaviConfig::get('core.available', false)) {
$container = $container->createSystemActionForwardContainer('unavailable');
}
$filterChain = $this->context->createInstanceFor('filter_chain');
$this->loadFilters($filterChain, 'global');
$filterChain->register($this->filters['dispatch']);
$filterChain->execute($container);
$response = $container->getResponse();
} elseif($container instanceof AgaviResponse) {
$response = $container;
$container = null;
} else {
throw new AgaviException('AgaviRouting::execute() returned neither AgaviExecutionContainer nor AgaviResponse object.');
}
$response->merge($this->response);
if($this->getParameter('send_response')) {
$response->send();
}
return $response;
} catch(Exception $e) {
AgaviException::render($e, $this->context, $container);
}
}
public function getGlobalResponse()
{
return $this->response;
}
public function checkActionFile($moduleName, $actionName)
{
$this->initializeModule($moduleName);
$actionName = AgaviToolkit::canonicalName($actionName);
$file = AgaviToolkit::evaluateModuleDirective(
$moduleName,
'agavi.action.path',
array(
'moduleName' => $moduleName,
'actionName' => $actionName,
)
);
if(is_readable($file) && substr($actionName, 0, 1) !== '/') {
return $file;
}
return false;
}
public function createActionInstance($moduleName, $actionName)
{
$this->initializeModule($moduleName);
$actionName = AgaviToolkit::canonicalName($actionName);
$longActionName = str_replace('/', '_', $actionName);
$class = $moduleName . '_' . $longActionName . 'Action';
if(!class_exists($class)) {
if(false !== ($file = $this->checkActionFile($moduleName, $actionName))) {
require($file);
} else {
throw new AgaviException('Could not find file for Action "' . $actionName . '" in module "' . $moduleName . '"');
}
if(!class_exists($class, false)) {
throw new AgaviException('Could not find Action "' . $longActionName . '" for module "' . $moduleName . '"');
}
}
return new $class();
}
public final function getContext()
{
return $this->context;
}
public function checkViewFile($moduleName, $viewName)
{
$this->initializeModule($moduleName);
$viewName = AgaviToolkit::canonicalName($viewName);
$file = AgaviToolkit::evaluateModuleDirective(
$moduleName,
'agavi.view.path',
array(
'moduleName' => $moduleName,
'viewName' => $viewName,
)
);
if(is_readable($file) && substr($viewName, 0, 1) !== '/') {
return $file;
}
return false;
}
public function createViewInstance($moduleName, $viewName)
{
try {
$this->initializeModule($moduleName);
} catch(AgaviDisabledModuleException $e) {
}
$viewName = AgaviToolkit::canonicalName($viewName);
$longViewName = str_replace('/', '_', $viewName);
$class = $moduleName . '_' . $longViewName . 'View';
if(!class_exists($class)) {
if(false !== ($file = $this->checkViewFile($moduleName, $viewName))) {
require($file);
} else {
throw new AgaviException('Could not find file for View "' . $viewName . '" in module "' . $moduleName . '"');
}
if(!class_exists($class, false)) {
throw new AgaviException('Could not find View "' . $longViewName . '" for module "' . $moduleName . '"');
}
}
return new $class();
}
public function __construct()
{
parent::__construct();
$this->setParameters(array(
'max_executions' => 20,
'send_response' => true,
));
}
public function initialize(AgaviContext $context, array $parameters = array())
{
$this->context = $context;
$this->setParameters($parameters);
$this->response = $this->context->createInstanceFor('response');
$cfg = AgaviConfig::get('core.config_dir') . '/output_types.xml';
require(AgaviConfigCache::checkConfig($cfg, $this->context->getName()));
if(AgaviConfig::get('core.use_security', false)) {
$this->filters['security'] = $this->context->createInstanceFor('security_filter');
}
$this->filters['dispatch'] = $this->context->createInstanceFor('dispatch_filter');
$this->filters['execution'] = $this->context->createInstanceFor('execution_filter');
}
public function getFilter($which)
{
return (isset($this->filters[$which]) ? $this->filters[$which] : null);
}
public function loadFilters(AgaviFilterChain $filterChain, $which = 'global', $module = null)
{
if($module === null) {
$module = '*';
}
if(($which != 'global' && !isset($this->filters[$which][$module])) || $which == 'global' && $this->filters[$which] == null) {
if($which == 'global') {
$this->filters[$which] = array();
$filters =& $this->filters[$which];
} else {
$this->filters[$which][$module] = array();
$filters =& $this->filters[$which][$module];
}
$config = ($module == '*' ? AgaviConfig::get('core.config_dir') : AgaviConfig::get('core.module_dir') . '/' . $module . '/config') . '/' . $which . '_filters.xml';
if(is_readable($config)) {
require(AgaviConfigCache::checkConfig($config, $this->context->getName()));
}
} else {
if($which == 'global') {
$filters =& $this->filters[$which];
} else {
$filters =& $this->filters[$which][$module];
}
}
foreach($filters as $filter) {
$filterChain->register($filter);
}
}
public function modelExists($moduleName, $modelName)
{
$modelName = AgaviToolkit::canonicalName($modelName);
$file = AgaviConfig::get('core.module_dir') . '/' . $moduleName . '/models/' . $modelName .	'Model.class.php';
return is_readable($file);
}
public function moduleExists($moduleName)
{
$file = AgaviConfig::get('core.module_dir') . '/' . $moduleName . '/config/module.xml';
return is_readable($file);
}
public function startup()
{
$this->requestData = $this->context->getRequest()->getRequestData();
}
public function shutdown()
{
}
public function actionExists($moduleName, $actionName)
{
return $this->checkActionFile($moduleName, $actionName) !== false;
}
public function viewExists($moduleName, $viewName)
{
return $this->checkViewFile($moduleName, $viewName) !== false;
}
public function getOutputType($name = null)
{
if($name === null) {
$name = $this->defaultOutputType;
}
if(isset($this->outputTypes[$name])) {
return $this->outputTypes[$name];
} else {
throw new AgaviException('Output Type "' . $name . '" has not been configured.');
}
}
}
class AgaviExecutionContainer extends AgaviAttributeHolder
{
protected $context = null;
protected $validationManager = null;
protected $requestMethod = null;
protected $requestData = null; private $globalRequestData = null;
protected $arguments = null;
protected $response = null;
protected $outputType = null;
protected $microtime = null;
protected $actionInstance = null;
protected $viewInstance = null;
protected $moduleName = null;
protected $actionName = null;
protected $viewModuleName = null;
protected $viewName = null;
protected $next = null;
const SANE_ACTION_NAME = '/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff\/.]*/';
const SANE_VIEW_NAME   = '/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff\/.]*/';
const SANE_MODULE_NAME = '/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/';
public function __sleep()
{
$this->contextName = $this->context->getName();
if(!empty($this->outputType)) {
$this->outputTypeName = $this->outputType->getName();
}
$arr = get_object_vars($this);
unset($arr['context'], $arr['outputType'], $arr['requestData'], $arr['globalRequestData']);
return array_keys($arr);
}
public function __wakeup()
{
$this->context = AgaviContext::getInstance($this->contextName);
if(!empty($this->outputTypeName)) {
$this->outputType = $this->context->getController()->getOutputType($this->outputTypeName);
}
try {
$this->globalRequestData = $this->context->getRequest()->getRequestData();
} catch(AgaviException $e) {
$this->globalRequestData = new AgaviRequestDataHolder();
}
unset($this->contextName, $this->outputTypeName);
}
public function initialize(AgaviContext $context, array $parameters = array())
{
$this->microtime = microtime(true);
$this->context = $context;
$this->parameters = $parameters;
$this->response = $this->context->createInstanceFor('response');
}
public function createExecutionContainer($moduleName = null, $actionName = null, AgaviRequestDataHolder $arguments = null, $outputType = null, $requestMethod = null)
{
if($outputType === null) {
$outputType = $this->getOutputType()->getName();
}
if($requestMethod === null) {
$requestMethod = $this->getRequestMethod();
}
$container = $this->context->getController()->createExecutionContainer($moduleName, $actionName, $arguments, $outputType, $requestMethod);
$container->setParameters($this->getParameters());
return $container;
}
public function execute()
{
$controller = $this->context->getController();
$request = $this->context->getRequest();
$controller->countExecution();
$moduleName = $this->getModuleName();
$actionName = $this->getActionName();
try {
if(false === $controller->checkActionFile($moduleName, $actionName)) {
$this->setNext($this->createSystemActionForwardContainer('error_404'));
return $this->proceed();
}
$this->actionInstance = $controller->createActionInstance($moduleName, $actionName);
} catch(AgaviDisabledModuleException $e) {
$this->setNext($this->createSystemActionForwardContainer('module_disabled'));
return $this->proceed();
}
$this->actionInstance->initialize($this);
if($this->actionInstance->isSimple()) {
if($this->arguments !== null) {
$this->requestData = clone $this->arguments;
} else {
$rdhc = $request->getParameter('request_data_holder_class');
$this->requestData = new $rdhc();
}
$controller->getFilter('execution')->execute(new AgaviFilterChain(), $this);
} else {
$this->requestData = clone $this->globalRequestData;
if($this->arguments !== null) {
$this->requestData->merge($this->arguments);
}
$filterChain = $this->context->createInstanceFor('filter_chain');
if(AgaviConfig::get('core.available', false)) {
if(AgaviConfig::get('core.use_security', false)) {
$filterChain->register($controller->getFilter('security'));
}
$controller->loadFilters($filterChain, 'action');
$controller->loadFilters($filterChain, 'action', $moduleName);
}
$filterChain->register($controller->getFilter('execution'));
$filterChain->execute($this);
}
return $this->proceed();
}
public function createSystemActionForwardContainer($type, AgaviException $e = null)
{
if(!in_array($type, array('error_404', 'module_disabled', 'secure', 'login', 'unavailable'))) {
throw new AgaviException(sprintf('Unknown system forward type "%1$s"', $type));
}
$forwardInfoData = array(
'requested_module' => $this->getModuleName(),
'requested_action' => $this->getActionName(),
'exception'        => $e,
);
$forwardInfoNamespace = 'org.agavi.controller.forwards.' . $type;
$moduleName = AgaviConfig::get('actions.' . $type . '_module');
$actionName = AgaviConfig::get('actions.' . $type . '_action');
if(false === $this->context->getController()->checkActionFile($moduleName, $actionName)) {
$error = 'Invalid configuration settings: actions.%3$s_module "%1$s", actions.%3$s_action "%2$s"';
$error = sprintf($error, $moduleName, $actionName, $type);
throw new AgaviConfigurationException($error);
}
$forwardContainer = $this->createExecutionContainer($moduleName, $actionName);
$forwardContainer->setAttributes($forwardInfoData, $forwardInfoNamespace);
$this->context->getRequest()->setAttributes($forwardInfoData, $forwardInfoNamespace);
return $forwardContainer;
}
protected function proceed()
{
if($this->next !== null) {
return $this->next->execute();
} else {
return $this->getResponse();
}
}
public final function getContext()
{
return $this->context;
}
public function getValidationManager()
{
if($this->validationManager === null) {
$this->validationManager = $this->context->createInstanceFor('validation_manager');
}
return $this->validationManager;
}
public function runAction()
{
$viewName = null;
$controller = $this->context->getController();
$request = $this->context->getRequest();
$validationManager = $this->getValidationManager();
$actionInstance = $this->getActionInstance();
$moduleName = $this->getModuleName();
$actionName = $this->getActionName();
$method = $this->getRequestMethod();
$requestData = $this->getRequestData();
$useGenericMethods = false;
$executeMethod = 'execute' . $method;
if(!is_callable(array($actionInstance, $executeMethod))) {
$executeMethod = 'execute';
$useGenericMethods = true;
}
if($actionInstance->isSimple() || ($useGenericMethods && !is_callable(array($actionInstance, $executeMethod)))) {
$key = $request->toggleLock();
try {
$viewName = $actionInstance->getDefaultViewName();
} catch(Exception $e) {
$request->toggleLock($key);
throw $e;
}
$request->toggleLock($key);
if(!$actionInstance->isSimple()) {
$validationManager->execute($requestData);
}
} else {
if($this->performValidation()) {
$key = $request->toggleLock();
try {
$viewName = $actionInstance->$executeMethod($requestData);
} catch(Exception $e) {
$request->toggleLock($key);
throw $e;
}
$request->toggleLock($key);
} else {
$handleErrorMethod = 'handle' . $method . 'Error';
if(!is_callable(array($actionInstance, $handleErrorMethod))) {
$handleErrorMethod = 'handleError';
}
$key = $request->toggleLock();
try {
$viewName = $actionInstance->$handleErrorMethod($requestData);
} catch(Exception $e) {
$request->toggleLock($key);
throw $e;
}
$request->toggleLock($key);
}
}
if(is_array($viewName)) {
$viewModule = $viewName[0];
$viewName   = $viewName[1];
} elseif($viewName !== AgaviView::NONE) {
$viewName = AgaviToolkit::evaluateModuleDirective(
$moduleName,
'agavi.view.name',
array(
'actionName' => $actionName,
'viewName' => $viewName,
)
);
$viewModule = $moduleName;
} else {
$viewName = AgaviView::NONE;
$viewModule = AgaviView::NONE;
}
return array($viewModule, $viewName === AgaviView::NONE ? AgaviView::NONE : AgaviToolkit::canonicalName($viewName));
}
public function performValidation()
{
$validationManager = $this->getValidationManager();
$actionInstance = $this->getActionInstance();
$method = $this->getRequestMethod();
$requestData = $this->getRequestData();
$validated = true;
$this->registerValidators();
$validated = $validationManager->execute($requestData);
$validateMethod = 'validate' . $method;
if(!is_callable(array($actionInstance, $validateMethod))) {
$validateMethod = 'validate';
}
return $actionInstance->$validateMethod($requestData) && $validated;
}
public function registerValidators()
{
$validationManager = $this->getValidationManager();
$actionInstance = $this->getActionInstance();
$moduleName = $this->getModuleName();
$actionName = $this->getActionName();
$method = $this->getRequestMethod();
$validationConfig = AgaviToolkit::evaluateModuleDirective(
$moduleName,
'agavi.validate.path',
array(
'moduleName' => $moduleName,
'actionName' => $actionName,
)
);
if(is_readable($validationConfig)) {
require(AgaviConfigCache::checkConfig($validationConfig, $this->context->getName()));
}
$registerValidatorsMethod = 'register' . $method . 'Validators';
if(!is_callable(array($actionInstance, $registerValidatorsMethod))) {
$registerValidatorsMethod = 'registerValidators';
}
$actionInstance->$registerValidatorsMethod();
}
public function getRequestMethod()
{
return $this->requestMethod;
}
public function setRequestMethod($requestMethod)
{
$this->requestMethod = $requestMethod;
}
public final function getRequestData()
{
return $this->requestData;
}
public final function setRequestData(AgaviRequestDataHolder $rd)
{
$this->globalRequestData = $rd;
}
public function getArguments()
{
return $this->arguments;
}
public function setArguments(AgaviRequestDataHolder $arguments)
{
$this->arguments = $arguments;
}
public function getResponse()
{
return $this->response;
}
public function setResponse(AgaviResponse $response)
{
$this->response = $response;
}
public function getOutputType()
{
return $this->outputType;
}
public function setOutputType(AgaviOutputType $outputType)
{
$this->outputType = $outputType;
if($this->response) {
$this->response->setOutputType($outputType);
}
}
public function getMicrotime()
{
return $this->microtime;
}
public function getActionInstance()
{
return $this->actionInstance;
}
public function getViewInstance()
{
return $this->viewInstance;
}
public function setViewInstance($viewInstance)
{
return $this->viewInstance = $viewInstance;
}
public function getModuleName()
{
return $this->moduleName;
}
public function getActionName()
{
return $this->actionName;
}
public function getViewModuleName()
{
return $this->viewModuleName;
}
public function getViewName()
{
return $this->viewName;
}
public function setModuleName($moduleName)
{
if(null === $moduleName) {
$this->moduleName = null;
} elseif(preg_match(self::SANE_MODULE_NAME, $moduleName)) {
$this->moduleName = $moduleName;
} else {
throw new AgaviException(sprintf('Invalid module name "%1$s"', $moduleName));
}
}
public function setActionName($actionName)
{
if(null === $actionName) {
$this->actionName = null;
} elseif(preg_match(self::SANE_ACTION_NAME, $actionName)) {
$actionName = AgaviToolkit::canonicalName($actionName);
$this->actionName = $actionName;
} else {
throw new AgaviException(sprintf('Invalid action name "%1$s"', $actionName));
}
}
public function setViewModuleName($viewModuleName)
{
if(null === $viewModuleName) {
$this->viewModuleName = null;
} elseif(preg_match(self::SANE_MODULE_NAME, $viewModuleName)) {
$this->viewModuleName = $viewModuleName;
} else {
throw new AgaviException(sprintf('Invalid view module name "%1$s"', $viewModuleName));
}
}
public function setViewName($viewName)
{
if(null === $viewName) {
$this->viewName = null;
} elseif(preg_match(self::SANE_VIEW_NAME, $viewName)) {
$viewName = AgaviToolkit::canonicalName($viewName);
$this->viewName = $viewName;
} else {
throw new AgaviException(sprintf('Invalid view name "%1$s"', $viewName));
}
}
public function hasNext()
{
return $this->next !== null;
}
public function getNext()
{
return $this->next;
}
public function setNext(AgaviExecutionContainer $container)
{
$this->next = $container;
}
public function clearNext()
{
$retval = $this->next;
$this->next = null;
return $retval;
}
}
class AgaviOutputType extends AgaviParameterHolder
{
protected $context = null;
protected $name = '';
protected $renderers = array();
protected $defaultRenderer = null;
protected $layouts = array();
protected $defaultLayout = null;
protected $exceptionTemplate = null;
public function initialize(AgaviContext $context, array $parameters, $name, array $renderers, $defaultRenderer, array $layouts, $defaultLayout, $exceptionTemplate = null)
{
$this->context = $context;
$this->parameters = $parameters;
$this->name = $name;
$this->renderers = $renderers;
$this->defaultRenderer = $defaultRenderer;
$this->layouts = $layouts;
$this->defaultLayout = $defaultLayout;
$this->exceptionTemplate = $exceptionTemplate;
}
public function getName()
{
return $this->name;
}
public final function __toString()
{
return $this->getName();
}
public function hasRenderers()
{
return (count($this->renderers) > 0);
}
public function getRenderer($name = null)
{
if(count($this->renderers) == 0) {
return null;
} elseif($name === null) {
$name = $this->defaultRenderer;
}
if(isset($this->renderers[$name])) {
if($this->renderers[$name]['instance'] === null) {
$renderer = new $this->renderers[$name]['class']();
$renderer->initialize($this->context, $this->renderers[$name]['parameters']);
if(isset($this->renderers[$name]['extension'])) {
$renderer->setExtension($this->renderers[$name]['extension']);
}
if($renderer instanceof AgaviIReusableRenderer) {
$this->renderers[$name]['instance'] = $renderer;
}
return $renderer;
} else {
return $this->renderers[$name]['instance'];
}
} else {
throw new AgaviException('Unknown renderer "' . $name . '"');
}
}
public function getDefaultLayoutName()
{
return $this->defaultLayout;
}
public function getLayout($name = null)
{
if($name === null) {
$name = $this->defaultLayout;
}
if(isset($this->layouts[$name])) {
return $this->layouts[$name];
} else {
throw new AgaviException('Unknown layout "' . $name . '"');
}
}
public function getExceptionTemplate()
{
return $this->exceptionTemplate;
}
}
abstract class AgaviFilter extends AgaviParameterHolder implements AgaviIFilter
{
protected $context = null;
public final function getContext()
{
return $this->context;
}
public function initialize(AgaviContext $context, array $parameters = array())
{
$this->context = $context;
$this->setParameters($parameters);
}
public function executeOnce(AgaviFilterChain $filterChain, AgaviExecutionContainer $container)
{
$this->execute($filterChain, $container);
}
public function execute(AgaviFilterChain $filterChain, AgaviExecutionContainer $container)
{
$filterChain->execute($container);
}
}
class AgaviDispatchFilter extends AgaviFilter implements AgaviIGlobalFilter
{
public function execute(AgaviFilterChain $filterChain, AgaviExecutionContainer $container)
{
$container->setResponse($container->execute());
}
}
class AgaviExecutionFilter extends AgaviFilter implements AgaviIActionFilter
{
const CACHE_SUBDIR = 'content';
const ACTION_CACHE_ID = '4-8-15-16-23-42';
const CACHE_CALLBACK_ACTION_NOT_CACHED = 0;
const CACHE_CALLBACK_ACTION_CACHE_GONE = 1;
const CACHE_CALLBACK_VIEW_NOT_CACHEABLE = 2;
const CACHE_CALLBACK_VIEW_NOT_CACHED = 3;
const CACHE_CALLBACK_OUTPUT_TYPE_NOT_CACHEABLE = 4;
const CACHE_CALLBACK_VIEW_CACHE_GONE = 5;
const CACHE_CALLBACK_ACTION_CACHE_USELESS = 6;
const CACHE_CALLBACK_VIEW_CACHE_WRITTEN = 7;
const CACHE_CALLBACK_ACTION_CACHE_WRITTEN = 8;
public function startedCacheCreationCallback($eventType, array $groups, array $config, AgaviExecutionContainer $container)
{
}
public function abortedCacheCreationCallback($eventType, array $groups, array $config, AgaviExecutionContainer $container)
{
}
public function finishedCacheCreationCallback($eventType, array $groups, array $config, AgaviExecutionContainer $container)
{
}
public function checkCache(array $groups, $lifetime = null)
{
foreach($groups as &$group) {
$group = base64_encode($group);
}
$filename = AgaviConfig::get('core.cache_dir') . DIRECTORY_SEPARATOR . self::CACHE_SUBDIR . DIRECTORY_SEPARATOR . implode(DIRECTORY_SEPARATOR, $groups) . '.cefcache';
$isReadable = is_readable($filename);
if($lifetime === null || !$isReadable) {
return $isReadable;
} else {
$expiry = strtotime('+' . $lifetime, filemtime($filename));
if($expiry !== false) {
return $isReadable && ($expiry >= time());
} else {
return false;
}
}
}
public function readCache(array $groups)
{
foreach($groups as &$group) {
$group = base64_encode($group);
}
$filename = AgaviConfig::get('core.cache_dir') . DIRECTORY_SEPARATOR . self::CACHE_SUBDIR . DIRECTORY_SEPARATOR . implode(DIRECTORY_SEPARATOR, $groups) . '.cefcache';
$data = @file_get_contents($filename);
if($data !== false) {
return unserialize($data);
} else {
throw new AgaviException(sprintf('Failed to read cache file "%s"', $filename));
}
}
public function writeCache(array $groups, $data, $lifetime = null)
{
foreach($groups as &$group) {
$group = base64_encode($group);
}
@mkdir(AgaviConfig::get('core.cache_dir') . DIRECTORY_SEPARATOR  . self::CACHE_SUBDIR . DIRECTORY_SEPARATOR . implode(DIRECTORY_SEPARATOR , array_slice($groups, 0, -1)), 0777, true);
return file_put_contents(AgaviConfig::get('core.cache_dir') . DIRECTORY_SEPARATOR . self::CACHE_SUBDIR . DIRECTORY_SEPARATOR . implode(DIRECTORY_SEPARATOR, $groups) . '.cefcache', serialize($data), LOCK_EX);
}
public static function clearCache(array $groups = array())
{
foreach($groups as &$group) {
$group = base64_encode($group);
}
$path = self::CACHE_SUBDIR . DIRECTORY_SEPARATOR . implode(DIRECTORY_SEPARATOR, $groups);
if(is_file(AgaviConfig::get('core.cache_dir') . DIRECTORY_SEPARATOR . $path . '.cefcache')) {
AgaviToolkit::clearCache($path . '.cefcache');
} else {
AgaviToolkit::clearCache($path);
}
}
public function determineGroups(array $groups, AgaviExecutionContainer $container)
{
$retval = array();
foreach($groups as $group) {
$group += array('name' => null, 'source' => null, 'namespace' => null);
$val = $this->getVariable($group['name'], $group['source'], $group['namespace'], $container);
if(is_object($val) && is_callable(array($val, '__toString'))) {
$val = $val->__toString();
} elseif(is_object($val) && function_exists('spl_object_hash')) {
$val = spl_object_hash($val);
}
if($val === null || $val === false || $val === '') {
$val = '0';
}
if(!is_scalar($val)) {
throw new AgaviUncacheableException('Group value is not a scalar, cannot construct a meaningful string representation.');
}
$retval[] = $val;
}
$retval[] = $container->getModuleName() . '_' . $container->getActionName();
return $retval;
}
public function getVariable($name, $source = 'string', $namespace = null, AgaviExecutionContainer $container = null)
{
$val = $name;
switch($source) {
case 'callback':
$val = $container->getActionInstance()->$name();
break;
case 'configuration_directive':
$val = AgaviConfig::get($name);
break;
case 'constant':
$val = constant($name);
break;
case 'container_parameter':
$val = $container->getParameter($name);
break;
case 'global_request_data':
$val = $this->context->getRequest()->getRequestData()->get($namespace ? $namespace : AgaviRequestDataHolder::SOURCE_PARAMETERS, $name);
break;
case 'locale':
$val = $this->context->getTranslationManager()->getCurrentLocaleIdentifier();
break;
case 'request_attribute':
$val = $this->context->getRequest()->getAttribute($name, $namespace);
break;
case 'request_data':
$val = $container->getRequestData()->get($namespace ? $namespace : AgaviRequestDataHolder::SOURCE_PARAMETERS, $name);
break;
case 'request_parameter':
$val = $this->context->getRequest()->getRequestData()->getParameter($name);
break;
case 'user_attribute':
$val = $this->context->getUser()->getAttribute($name, $namespace);
break;
case 'user_authenticated':
if(($user = $this->context->getUser()) instanceof AgaviISecurityUser) {
$val = $user->isAuthenticated();
}
break;
case 'user_credential':
if(($user = $this->context->getUser()) instanceof AgaviISecurityUser) {
$val = $user->hasCredentials($name);
}
break;
case 'user_parameter':
$val = $this->context->getUser()->getParameter($name);
break;
}
return $val;
}
public function execute(AgaviFilterChain $filterChain, AgaviExecutionContainer $container)
{
$controller = $this->context->getController();
$actionName = $container->getActionName();
$moduleName = $container->getModuleName();
$actionInstance = $container->getActionInstance();
$request = $this->context->getRequest();
$isCacheable = false;
$cachingDotXml = AgaviToolkit::evaluateModuleDirective(
$moduleName,
'agavi.cache.path',
array(
'moduleName' => $moduleName,
'actionName' => $actionName,
)
);
if($this->getParameter('enable_caching', true) && is_readable($cachingDotXml)) {
include(AgaviConfigCache::checkConfig($cachingDotXml, $this->context->getName()));
}
$isActionCached = false;
if($isCacheable) {
try {
$groups = $this->determineGroups($config['groups'], $container);
$actionGroups = array_merge($groups, array(self::ACTION_CACHE_ID));
} catch(AgaviUncacheableException $e) {
$isCacheable = false;
}
if($isCacheable) {
$isActionCached = $this->checkCache(array_merge($groups, array(self::ACTION_CACHE_ID)), $config['lifetime']);
if(!$isActionCached) {
$this->startedCacheCreationCallback(self::CACHE_CALLBACK_ACTION_NOT_CACHED, $actionGroups, $config, $container);
}
}
} else {
}
if($isActionCached) {
try {
$actionCache = $this->readCache($actionGroups);
$actionInstance->setAttributes($actionCache['action_attributes']);
} catch(AgaviException $e) {
$this->startedCacheCreationCallback(self::CACHE_CALLBACK_ACTION_CACHE_GONE, $actionGroups, $config, $container);
$isActionCached = false;
}
}
$isViewCached = false;
$rememberTheView = null;
while(true) {
if(!$isActionCached) {
$actionCache = array();
list($actionCache['view_module'], $actionCache['view_name']) = $container->runAction();
if(isset($rememberTheView) && $actionCache != $rememberTheView) {
$ourClass = get_class($this);
call_user_func(array($ourClass, 'clearCache'), $groups);
}
if($isCacheable && is_array($config['views']) && !in_array(array('module' => $actionCache['view_module'], 'name' => $actionCache['view_name']), $config['views'], true)) {
$isCacheable = false;
$this->abortedCacheCreationCallback(self::CACHE_CALLBACK_VIEW_NOT_CACHEABLE, $actionGroups, $config, $container);
if(isset($rememberTheView)) {
$ourClass = get_class($this);
call_user_func(array($ourClass, 'clearCache'), $groups);
}
} else {
}
$actionAttributes = $actionInstance->getAttributes();
}
$response = $container->getResponse();
$response->clear();
$container->clearNext();
if($actionCache['view_name'] !== AgaviView::NONE) {
$container->setViewModuleName($actionCache['view_module']);
$container->setViewName($actionCache['view_name']);
$key = $request->toggleLock();
try {
$viewInstance = $controller->createViewInstance($actionCache['view_module'], $actionCache['view_name']);
$viewInstance->initialize($container);
} catch(Exception $e) {
$request->toggleLock($key);
throw $e;
}
$request->toggleLock($key);
$container->setViewInstance($viewInstance);
$outputType = $container->getOutputType()->getName();
if($isCacheable) {
if(isset($config['output_types'][$otConfig = $outputType]) || isset($config['output_types'][$otConfig = '*'])) {
$otConfig = $config['output_types'][$otConfig];
$viewGroups = array_merge($groups, array($outputType));
if($isActionCached) {
$isViewCached = $this->checkCache($viewGroups, $config['lifetime']);
if(!$isViewCached) {
$this->startedCacheCreationCallback(self::CACHE_CALLBACK_VIEW_NOT_CACHED, $viewGroups, $config, $container);
}
}
} else {
$this->abortedCacheCreationCallback(self::CACHE_CALLBACK_OUTPUT_TYPE_NOT_CACHEABLE, $actionGroups, $config, $container);
$isCacheable = false;
}
}
if($isViewCached) {
try {
$viewCache = $this->readCache($viewGroups);
} catch(AgaviException $e) {
$this->startedCacheCreationCallback(self::CACHE_CALLBACK_VIEW_CACHE_GONE, $viewGroups, $config, $container);
$isViewCached = false;
}
}
if(!$isViewCached) {
if($isActionCached && !$config['action_attributes']) {
$isActionCached = false;
if($isCacheable) {
$this->abortedCacheCreationCallback(self::CACHE_CALLBACK_ACTION_CACHE_USELESS, $viewGroups, $config, $container);
}
$this->startedCacheCreationCallback(self::CACHE_CALLBACK_ACTION_CACHE_USELESS, $actionGroups, $config, $container);
$rememberTheView = array(
'view_module' => $actionCache['view_module'],
'view_name' => $actionCache['view_name'],
);
continue;
}
$viewCache = array();
$viewCache['next'] = $this->executeView($container);
}
if($viewCache['next'] instanceof AgaviExecutionContainer) {
$container->setNext($viewCache['next']);
} else {
$output = array();
$nextOutput = null;
if($isViewCached) {
$layers = $viewCache['layers'];
$response = $viewCache['response'];
$container->setResponse($response);
foreach($viewCache['template_variables'] as $name => $value) {
$viewInstance->setAttribute($name, $value);
}
foreach($viewCache['request_attributes'] as $requestAttribute) {
$request->setAttribute($requestAttribute['name'], $requestAttribute['value'], $requestAttribute['namespace']);
}
foreach($viewCache['request_attribute_namespaces'] as $ranName => $ranValues) {
$request->setAttributes($ranValues, $ranName);
}
$nextOutput = $response->getContent();
} else {
if($viewCache['next'] !== null) {
$response->setContent($nextOutput = $viewCache['next']);
$viewCache['next'] = null;
}
$layers = $viewInstance->getLayers();
if($isCacheable) {
$viewCache['template_variables'] = array();
foreach($otConfig['template_variables'] as $varName) {
$viewCache['template_variables'][$varName] = $viewInstance->getAttribute($varName);
}
$viewCache['response'] = clone $response;
$viewCache['layers'] = array();
$viewCache['slots'] = array();
$lastCacheableLayer = -1;
if(is_array($otConfig['layers'])) {
if(count($otConfig['layers'])) {
for($i = count($layers)-1; $i >= 0; $i--) {
$layer = $layers[$i];
$layerName = $layer->getName();
if(isset($otConfig['layers'][$layerName])) {
if(is_array($otConfig['layers'][$layerName])) {
$lastCacheableLayer = $i - 1;
} else {
$lastCacheableLayer = $i;
}
}
}
}
} else {
$lastCacheableLayer = count($layers) - 1;
}
for($i = $lastCacheableLayer + 1; $i < count($layers); $i++) {
$viewCache['layers'][] = clone $layers[$i];
}
}
}
$attributes =& $viewInstance->getAttributes();
$assignInnerToSlots = $this->getParameter('assign_inner_to_slots', false);
for($i = 0; $i < count($layers); $i++) {
$layer = $layers[$i];
$layerName = $layer->getName();
foreach($layer->getSlots() as $slotName => $slotContainer) {
if($isViewCached && isset($viewCache['slots'][$layerName][$slotName])) {
$slotResponse = $viewCache['slots'][$layerName][$slotName];
} else {
$slotResponse = $slotContainer->execute();
if($isCacheable && !$isViewCached && isset($otConfig['layers'][$layerName]) && is_array($otConfig['layers'][$layerName]) && in_array($slotName, $otConfig['layers'][$layerName])) {
$viewCache['slots'][$layerName][$slotName] = $slotResponse;
}
}
$output[$slotName] = $slotResponse->getContent();
$response->merge($slotResponse);
}
$moreAssigns = array(
'container' => $container,
'inner' => $nextOutput,
'request_data' => $container->getRequestData(),
'validation_manager' => $container->getValidationManager(),
'view' => $viewInstance,
);
$key = $request->toggleLock();
try {
$nextOutput = $layer->getRenderer()->render($layer, $attributes, $output, $moreAssigns);
} catch(Exception $e) {
$request->toggleLock($key);
throw $e;
}
$request->toggleLock($key);
$response->setContent($nextOutput);
if($isCacheable && !$isViewCached && $i === $lastCacheableLayer) {
$viewCache['response'] = clone $response;
}
$output = array();
if($assignInnerToSlots) {
$output[$layer->getName()] = $nextOutput;
}
}
}
if($isCacheable && !$isViewCached) {
$viewCache['request_attributes'] = array();
foreach($otConfig['request_attributes'] as $requestAttribute) {
$viewCache['request_attributes'][] = $requestAttribute + array('value' => $request->getAttribute($requestAttribute['name'], $requestAttribute['namespace']));
}
$viewCache['request_attribute_namespaces'] = array();
foreach($otConfig['request_attribute_namespaces'] as $requestAttributeNamespace) {
$viewCache['request_attribute_namespaces'][$requestAttributeNamespace] = $request->getAttributes($requestAttributeNamespace);
}
$this->writeCache($viewGroups, $viewCache, $config['lifetime']);
$this->finishedCacheCreationCallback(self::CACHE_CALLBACK_VIEW_CACHE_WRITTEN, $viewGroups, $config, $container);
}
}
if($isCacheable && !$isActionCached) {
$actionCache['action_attributes'] = array();
foreach($config['action_attributes'] as $attributeName) {
$actionCache['action_attributes'][$attributeName] = $actionAttributes[$attributeName];
}
$this->writeCache($actionGroups, $actionCache, $config['lifetime']);
$this->finishedCacheCreationCallback(self::CACHE_CALLBACK_ACTION_CACHE_WRITTEN, $actionGroups, $config, $container);
}
break;
}
}
protected function runAction(AgaviExecutionContainer $container)
{
return $container->runAction();
}
protected function executeView(AgaviExecutionContainer $container)
{
$outputType = $container->getOutputType()->getName();
$request = $this->context->getRequest();
$viewInstance = $container->getViewInstance();
$executeMethod = 'execute' . $outputType;
if(!is_callable(array($viewInstance, $executeMethod))) {
$executeMethod = 'execute';
}
$key = $request->toggleLock();
try {
$viewResult = $viewInstance->$executeMethod($container->getRequestData());
} catch(Exception $e) {
$request->toggleLock($key);
throw $e;
}
$request->toggleLock($key);
return $viewResult;
}
}
class AgaviFilterChain
{
protected static $filterLog;
protected $filterLogKey = '';
protected $chain = array();
protected $index = -1;
protected $context = null;
public function initialize(AgaviContext $context, array $parameters = array())
{
$this->context = $context;
$this->filterLogKey = $context->getName();
}
public function execute(AgaviExecutionContainer $container)
{
$this->index++;
if($this->index < count($this->chain)) {
$filter = $this->chain[$this->index];
$count = ++self::$filterLog[$this->filterLogKey][get_class($filter)];
if($count == 1) {
$filter->executeOnce($this, $container);
} else {
$filter->execute($this, $container);
}
}
}
public function register(AgaviIFilter $filter)
{
$this->chain[] = $filter;
$filterClass = get_class($filter);
if(!isset(self::$filterLog[$this->filterLogKey][$filterClass])) {
self::$filterLog[$this->filterLogKey][$filterClass] = 0;
}
}
}
abstract class AgaviRenderer extends AgaviParameterHolder
{
protected $context = null;
protected $defaultExtension = '';
protected $varName = 'template';
protected $slotsVarName = 'slots';
protected $extractVars = false;
protected $assigns = array();
protected $moreAssignNames = array();
public function __sleep()
{
$this->contextName = $this->context->getName();
$arr = get_object_vars($this);
unset($arr['context']);
return array_keys($arr);
}
public function __wakeup()
{
$this->context = AgaviContext::getInstance($this->contextName);
unset($this->contextName);
}
public function initialize(AgaviContext $context, array $parameters = array())
{
$this->context = $context;
$this->setParameters($parameters);
$this->varName = $this->getParameter('var_name', $this->varName);
$this->slotsVarName = $this->getParameter('slots_var_name', $this->slotsVarName);
$this->extractVars = $this->getParameter('extract_vars', $this->extractVars);
$this->defaultExtension = $this->getParameter('default_extension', $this->defaultExtension);
if(!$this->extractVars && $this->varName == $this->slotsVarName) {
throw new AgaviException('Template and Slots container variable names cannot be identical.');
}
foreach($this->getParameter('assigns', array()) as $item => $var) {
$getter = 'get' . str_replace('_', '', $item);
if(is_callable(array($this->context, $getter))) {
if($var === null) {
continue;
}
$this->assigns[$var] = $getter;
} else {
$this->moreAssignNames[$item] = $var;
}
}
}
public final function getContext()
{
return $this->context;
}
public function getDefaultExtension()
{
return $this->defaultExtension;
}
protected static function &buildMoreAssigns(&$moreAssigns, $moreAssignNames)
{
$retval = array();
foreach($moreAssigns as $name => &$value) {
if(isset($moreAssignNames[$name])) {
$name = $moreAssignNames[$name];
} elseif(array_key_exists($name, $moreAssignNames)) {
continue;
}
$retval[$name] =& $value;
}
return $retval;
}
abstract public function render(AgaviTemplateLayer $layer, array &$attributes = array(), array &$slots = array(), array &$moreAssigns = array());
}
class AgaviRequestDataHolder extends AgaviParameterHolder implements AgaviIParametersRequestDataHolder
{
const SOURCE_PARAMETERS = 'parameters';
private $sources = array();
private $sourceNames = array();
public function mergeParameters(AgaviRequestDataHolder $other)
{
$this->setParameters($other->getParameters());
}
public function isParameterValueEmpty($field)
{
return !$this->hasParameter($field);
}
public function clear($source)
{
if(isset($this->$source)) {
$funcname = 'clear' . $source;
$this->$funcname();
} else {
throw new InvalidArgumentException('Unknown source ' . $source . 'specified');
}
}
public function clearAll()
{
foreach($this->sourceNames as $sourceName => $source) {
$funcname = 'clear' . $sourceName;
$this->$funcname();
}
}
public function &get($source, $field, $default = null)
{
if(isset($this->$source)) {
$funcname = 'get' . $this->sourceNames[$source];
return $this->$funcname($field, $default);
} else {
throw new InvalidArgumentException('Unknown source ' . $source . 'specified');
}
}
public function &getAll($source)
{
if(isset($this->$source)) {
$funcname = 'get' . $source;
return $this->$funcname();
} else {
throw new InvalidArgumentException('Unknown source ' . $source . 'specified');
}
}
public function has($source, $field)
{
if(isset($this->$source)) {
$funcname = 'has' . $this->sourceNames[$source];
return $this->$funcname($field);
} else {
throw new InvalidArgumentException('Unknown source ' . $source . 'specified');
}
}
public function isValueEmpty($source, $field)
{
if(isset($this->$source)) {
$funcname = 'is' . $this->sourceNames[$source] . 'ValueEmpty';
return $this->$funcname($field);
} else {
throw new InvalidArgumentException('Unknown source ' . $source . 'specified');
}
}
public function &remove($source, $field)
{
if(isset($this->$source)) {
$funcname = 'remove' . $this->sourceNames[$source];
return $this->$funcname($field);
} else {
throw new InvalidArgumentException('Unknown source ' . $source . 'specified');
}
}
public function set($source, $field, $value)
{
if(isset($this->$source)) {
$funcname = 'set' . $this->sourceNames[$source];
$this->$funcname($field, $value);
} else {
throw new InvalidArgumentException('Unknown source ' . $source . 'specified');
}
}
final protected function registerSource($name, array &$holder)
{
$this->sources[$name] =& $holder;
$this->sourceNames[$name] = AgaviInflector::singularize($name);
}
public function merge(AgaviRequestDataHolder $other)
{
foreach(array_keys($this->sourceNames) as $source) {
$fn = 'merge' . $source; $this->$fn($other);
}
}
public final function getSourceNames()
{
return array_keys($this->sourceNames);
}
public function __construct(array $data = array())
{
$this->registerSource(self::SOURCE_PARAMETERS, $this->parameters);
foreach($this->sources as $name => &$container) {
if(isset($data[$name]) && is_array($data[$name])) {
$container = $data[$name];
} else {
$container = array();
}
}
unset($this->sources);
}
}
abstract class AgaviRequest extends AgaviAttributeHolder
{
protected $attributes = array();
protected $errors     = array();
protected $method     = null;
protected $context    = null;
private $requestData = null;
private $key = null;
public final function getContext()
{
return $this->context;
}
public function getMethod()
{
return $this->method;
}
public function __construct()
{
$this->setParameters(array(
'use_module_action_parameters' => false,
'module_accessor' => 'module',
'action_accessor' => 'action',
'request_data_holder_class' => 'AgaviRequestDataHolder',
));
}
public function initialize(AgaviContext $context, array $parameters = array())
{
$this->context = $context;
if(isset($parameters['default_namespace'])) {
$this->defaultNamespace = $parameters['default_namespace'];
unset($parameters['default_namespace']);
}
$this->setParameters($parameters);
}
public function setMethod($method)
{
$this->method = $method;
}
final protected function setRequestData(AgaviRequestDataHolder $rd)
{
if(!$this->isLocked()) {
$this->requestData = $rd;
}
}
final public function getRequestData()
{
if($this->isLocked()) {
throw new AgaviException("Access to request data is locked during Action and View execution and while templates are rendered. Please use the local request data holder passed to your Action's or View's execute*() method to access request data.");
}
return $this->requestData;
}
public function startup()
{
if($this->getParameter('unset_input', true)) {
unset($GLOBALS['HTTP_RAW_POST_DATA']);
$rla = ini_get('register_long_arrays');
if(isset($_SERVER['argc'])) {
$_SERVER['argc'] = 0;
if(isset($GLOBALS['argc'])) {
$GLOBALS['argc'] = 0;
}
if($rla) {
$GLOBALS['HTTP_SERVER_VARS']['argc'] = 0;
}
}
if(isset($_SERVER['argv'])) {
$_SERVER['argv'] = array();
if(isset($GLOBALS['argv'])) {
$GLOBALS['argv'] = array();
}
if($rla) {
$GLOBALS['HTTP_SERVER_VARS']['argv'] = array();
}
}
}
}
public function shutdown()
{
}
public static function getSourceValue($keys, $default = null)
{
$keys = (array)$keys;
foreach($keys as $key) {
if(isset($_SERVER[$key])) {
return $_SERVER[$key];
} elseif(isset($_ENV[$key])) {
return $_ENV[$key];
}
}
if($default !== null) {
return $default;
}
if($keys) {
return end($keys);
}
}
public final function isLocked()
{
return $this->key !== null;
}
public final function toggleLock($key = null)
{
if(!$this->isLocked() && $key === null) {
$this->locked = true;
return $this->key = AgaviToolkit::uniqid();
} elseif($this->isLocked()) {
if($this->key === $key) {
$this->key = null;
return true;
}
return false;
}
}
}
abstract class AgaviResponse extends AgaviParameterHolder
{
protected $context = null;
protected $content = null;
protected $outputType = null;
public function __sleep()
{
$vars = get_object_vars($this);
$also = array();
$this->contextName = $this->context->getName();
unset($vars['context']);
$also[] = 'contextName';
if($this->outputType) {
$this->outputTypeName = $this->outputType->getName();
unset($vars['outputType']);
$also[] = 'outputTypeName';
}
if(is_resource($this->content)) {
$this->contentStreamMeta = stream_get_meta_data($this->content);
unset($vars['content']);
$also[] = 'contentStreamMeta';
}
return array_merge(array_keys($vars), $also);
}
public function __wakeup()
{
$this->context = AgaviContext::getInstance($this->contextName);
unset($this->contextName);
if(isset($this->outputTypeName)) {
$this->outputType = $this->context->getController()->getOutputType($this->outputTypeName);
unset($this->outputTypeName);
}
if(isset($this->contentStreamMeta)) {
$this->content = fopen($this->contentStreamMeta['uri'], $this->contentStreamMeta['mode']);
unset($this->contentStreamMeta);
}
}
public final function getContext()
{
return $this->context;
}
public function initialize(AgaviContext $context, array $parameters = array())
{
$this->context = $context;
$this->setParameters($parameters);
}
public function getOutputType()
{
return $this->outputType;
}
public function setOutputType(AgaviOutputType $outputType)
{
$this->outputType = $outputType;
}
public function clearOutputType()
{
$this->outputType = null;
}
public function getContent()
{
return $this->content;
}
public function hasContent()
{
return $this->content !== null;
}
public function getContentSize()
{
if(is_resource($this->content)) {
if(($stat = fstat($this->content)) !== false) {
return $stat['size'];
} else {
return false;
}
} else {
return strlen($this->content);
}
}
public function setContent($content)
{
$this->content = $content;
}
public function prependContent($content)
{
$this->setContent($content . $this->getContent());
}
public function appendContent($content)
{
$this->setContent($this->getContent() . $content);
}
public function clearContent()
{
$this->content = null;
}
abstract public function setRedirect($to);
abstract public function getRedirect();
abstract public function hasRedirect();
abstract public function clearRedirect();
abstract public function merge(AgaviResponse $otherResponse);
abstract public function clear();
abstract public function send(AgaviOutputType $outputType = null);
public function isContentMutable()
{
return !$this->hasRedirect() && !is_resource($this->content);
}
protected function sendContent()
{
if(is_resource($this->content)) {
fpassthru($this->content);
fclose($this->content);
} else {
echo $this->content;
}
}
}
abstract class AgaviRouting extends AgaviParameterHolder
{
const ANCHOR_NONE = 0;
const ANCHOR_START = 1;
const ANCHOR_END = 2;
protected $routes = array();
protected $context = null;
protected $input = null;
protected $sources = array();
protected $prefix = '';
protected $defaultGenOptions = array();
protected $genOptionsPresets = array();
public function __construct()
{
$this->setParameter('enabled', AgaviConfig::get('core.use_routing', true));
$this->defaultGenOptions = array_merge($this->defaultGenOptions, array(
'relative' => true,
'refill_all_parameters' => false,
'omit_defaults' => false,
));
}
public function initialize(AgaviContext $context, array $parameters = array())
{
$this->context = $context;
$this->setParameters($parameters);
$this->defaultGenOptions = array_merge(
$this->defaultGenOptions,
$this->getParameter('default_gen_options', array())
);
$this->genOptionsPresets = array_merge(
$this->genOptionsPresets,
$this->getParameter('gen_options_presets', array())
);
$this->loadConfig();
}
protected function loadConfig()
{
$cfg = AgaviConfig::get('core.config_dir') . '/routing.xml';
if($this->isEnabled() || is_readable($cfg)) {
$this->importRoutes(unserialize(file_get_contents(AgaviConfigCache::checkConfig($cfg, $this->context->getName()))));
}
}
public function startup()
{
$this->sources['_ENV'] = new AgaviRoutingArraySource($_ENV);
$this->sources['_SERVER'] = new AgaviRoutingArraySource($_SERVER);
if(AgaviConfig::get('core.use_security')) {
$this->sources['user'] = new AgaviRoutingUserSource($this->context->getUser());
}
}
public function shutdown()
{
}
public function isEnabled()
{
return $this->getParameter('enabled') === true;
}
public final function getContext()
{
return $this->context;
}
public final function getRoute($name)
{
if(!isset($this->routes[$name])) {
return null;
}
return $this->routes[$name];
}
public final function getInput()
{
return $this->input;
}
public final function getPrefix()
{
return $this->prefix;
}
public function addRoute($route, array $options = array(), $parent = null)
{
if(isset($options['name']) && isset($this->routes[$options['name']])) {
$defaultOpts = $this->routes[$options['name']]['opt'];
if($parent !== null && $defaultOpts['parent'] != $parent) {
throw new AgaviException('You are trying to overwrite a route but are not staying in the same hierarchy');
}
if($parent === null) {
$parent = $defaultOpts['parent'];
} else {
$defaultOpts['parent'] = $parent;
}
} else {
$defaultOpts = array('name' => AgaviToolkit::uniqid(), 'stop' => true, 'output_type' => null, 'module' => null, 'action' => null, 'parameters' => array(), 'ignores' => array(), 'defaults' => array(), 'childs' => array(), 'callbacks' => array(), 'imply' => false, 'cut' => null, 'source' => null, 'method' => null, 'constraint' => array(), 'locale' => null, 'pattern_parameters' => array(), 'optional_parameters' => array(), 'parent' => $parent, 'reverseStr' => '', 'nostops' => array(), 'anchor' => self::ANCHOR_NONE);
}
if(isset($options['callback'])) {
$options['callbacks'] = array(array('class' => $options['callback'], 'parameters' => array()));
unset($options['callback']);
}
if(isset($options['defaults'])) {
foreach($options['defaults'] as $name => &$value) {
$val = $pre = $post = null;
if(preg_match('#(.*)\{(.*)\}(.*)#', $value, $match)) {
$pre = $match[1];
$val = $match[2];
$post = $match[3];
} else {
$val = $value;
}
$value = $this->createValue($val)->setPrefix($pre)->setPostfix($post);
}
}
$options = array_merge($defaultOpts, $options);
list($regexp, $options['reverseStr'], $routeParams, $options['anchor']) = $this->parseRouteString($route);
$params = array();
foreach($routeParams as $name => $param) {
$params[] = $name;
if($param['is_optional']) {
$options['optional_parameters'][$name] = true;
}
if(!isset($options['defaults'][$name]) && ($param['pre'] || $param['val'] || $param['post'])) {
unset($param['is_optional']);
$options['defaults'][$name] = $this->createValue($param['val'])->setPrefix($param['pre'])->setPostfix($param['post']);
}
}
$options['pattern_parameters'] = $params;
foreach($options['ignores'] as $ignore) {
if(($key = array_search($ignore, $params)) !== false) {
unset($params[$key]);
}
}
$routeName = $options['name'];
foreach($this->routes as $name => $route) {
if($route['opt']['parent'] == $routeName && !in_array($name, $options['childs'])) {
throw new AgaviException('The route ' . $routeName . ' specifies a child route with the same name');
}
}
if($routeName == $parent) {
throw new AgaviException('The route ' . $routeName . ' specifies a child route with the same name');
}
if($parent !== null) {
foreach($this->routes[$parent]['opt']['childs'] as $name) {
if($name == $routeName) {
break;
}
$route = $this->routes[$name];
if(!$route['opt']['stop']) {
$options['nostops'][] = $name;
}
}
$this->routes[$parent]['opt']['childs'][] = $routeName;
} else {
foreach($this->routes as $name => $route) {
if($name == $routeName) {
break;
}
if(!$route['opt']['stop'] && !$route['opt']['parent']) {
$options['nostops'][] = $name;
}
}
}
$options['nostops'] = array_unique($options['nostops']);
$route = array('rxp' => $regexp, 'par' => $params, 'opt' => $options, 'matches' => array());
$this->routes[$routeName] = $route;
return $routeName;
}
public function exportRoutes()
{
return $this->routes;
}
public function importRoutes(array $routes)
{
$this->routes = $routes;
}
public function getAffectedRoutes($route, &$isNullRoute = false)
{
$includedRoutes = array();
$excludedRoutes = array();
if($route === null) {
$includedRoutes = array_reverse($this->getContext()->getRequest()->getAttribute('matched_routes', 'org.agavi.routing', array()));
$isNullRoute = true;
} elseif(strlen($route) > 0) {
if($route[0] == '-' || $route[0] == '+') {
$includedRoutes = array_reverse($this->getContext()->getRequest()->getAttribute('matched_routes', 'org.agavi.routing', array()));
$isNullRoute = true;
}
$routeParts = preg_split('#(-|\+)#', $route, -1, PREG_SPLIT_DELIM_CAPTURE);
$prevDelimiter = '+';
foreach($routeParts as $part) {
if($part == '+' || $part == '-') {
$prevDelimiter = $part;
}
if($prevDelimiter == '+') {
$includedRoutes[] = $part;
} else { $excludedRoutes[] = $part;
}
}
}
$excludedRoutes = array_flip($excludedRoutes);
if($includedRoutes) {
$route = $includedRoutes[0];
unset($includedRoutes[0]);
}
$myRoutes = array();
foreach($includedRoutes as $r) {
$myRoutes[$r] = true;
}
$affectedRoutes = array();
if(isset($this->routes[$route])) {
$parent = $route;
do {
if(!isset($excludedRoutes[$parent])) {
$affectedRoutes[] = $parent;
}
$r = $this->routes[$parent];
foreach(array_reverse($r['opt']['nostops']) as $noStop) {
$myR = $this->routes[$noStop];
if(isset($myRoutes[$noStop])) {
unset($myRoutes[$noStop]);
} elseif(!$myR['opt']['imply']) {
continue;
}
if(!isset($excludedRoutes[$noStop])) {
$affectedRoutes[] = $noStop;
}
}
$parent = $r['opt']['parent'];
} while($parent);
} else {
}
if(count($myRoutes)) {
}
return $affectedRoutes;
}
public function getMatchedParameters(array $routeNames)
{
$params = array();
foreach($routeNames as $name) {
if(isset($this->routes[$name])) {
$route = $this->routes[$name];
$params = array_merge($params, $route['matches']);
}
}
return $params;
}
protected function resolveGenOptions($input = array())
{
if(is_string($input)) {
if(isset($this->genOptionsPresets[$input])) {
return array_merge($this->defaultGenOptions, $this->genOptionsPresets[$input]);
}
} elseif(is_array($input)) {
return array_merge($this->defaultGenOptions, $input);
}
throw new AgaviException('Undefined Routing gen() options preset "' . $input . '"');
}
public function fillGenNullParameters(array $routeNames, array $params)
{
return array_merge($this->getMatchedParameters($routeNames), $params);
}
protected function assembleRoutes(array $options, array $routeNames, array $params)
{
$uri = '';
$defaultParams = array();
$availableParams = array();
$matchedParams = array(); $optionalParams = array();
$firstRoute = true;
foreach($routeNames as $routeName) {
$r = $this->routes[$routeName];
$myDefaults = $r['opt']['defaults'];
if(count($r['opt']['callbacks']) > 0) {
if(!isset($r['callback_instances'])) {
foreach($r['opt']['callbacks'] as $key => $callback) {
$instance = new $callback['class']();
$instance->setParameters($callback['parameters']);
$instance->initialize($this->context, $r);
$r['callback_instances'][$key] = $instance;
}
}
foreach($r['callback_instances'] as $callbackInstance) {
$paramsCopy = $params;
$isLegacyCallback = false;
if($callbackInstance instanceof AgaviILegacyRoutingCallback) {
$isLegacyCallback = true;
$defaultsCopy = $myDefaults;
foreach($paramsCopy as &$param) {
if($param instanceof AgaviIRoutingValue) {
$param = $param->getValue();
}
}
foreach($defaultsCopy as &$default) {
if($default instanceof AgaviIRoutingValue) {
$default = array(
'pre' => $default->getPrefix(),
'val' => $default->getValue(),
'post' => $default->getPostfix(),
);
}
}
$changedParamsCopy = $paramsCopy;
if(!$callbackInstance->onGenerate($defaultsCopy, $paramsCopy, $options)) {
continue 2;
}
$diff = array();
foreach($paramsCopy as $key => $value) {
if(!array_key_exists($key, $changedParamsCopy) || $changedParamsCopy[$key] !== $value) {
$diff[$key] = $value;
}
}
} else {
if(!$callbackInstance->onGenerate($myDefaults, $params, $options)) {
continue 2;
}
$diff = array();
foreach($params as $key => $value) {
if(!array_key_exists($key, $paramsCopy) || $paramsCopy[$key] !== $value) {
$diff[$key] = $value;
}
}
}
if(count($diff)) {
$diffKeys = array_keys($diff);
foreach($diffKeys as $key) {
$value = $isLegacyCallback ? $paramsCopy[$key] : $params[$key];
if($value !== null && !($value instanceof AgaviIRoutingValue)) {
$routingValue = $this->createValue($value, false);
if(isset($myDefaults[$key])) {
if($myDefaults[$key] instanceof AgaviIRoutingValue) {
$routingValue = clone $myDefaults[$key];
$routingValue->setValue($value)->setValueNeedsEncoding(false);
} else {
$routingValue->setPrefix($myDefaults[$key]['pre'])->setPrefixNeedsEncoding(false);
$routingValue->setPostfix($myDefaults[$key]['post'])->setPostfixNeedsEncoding(false);
}
}
$value = $routingValue;
}
$params[$key] = $value;
}
}
}
}
if($r['opt']['source']) {
continue;
}
$matchedParams = array_merge($matchedParams, $r['matches']);
$optionalParams = array_merge($optionalParams, $r['opt']['optional_parameters']);
$availableParams = array_merge($availableParams, array_reverse($r['opt']['pattern_parameters']));
if($firstRoute || $r['opt']['cut'] || (count($r['opt']['childs']) && $r['opt']['cut'] === null)) {
if($r['opt']['anchor'] & self::ANCHOR_START || $r['opt']['anchor'] == self::ANCHOR_NONE) {
$uri = $r['opt']['reverseStr'] . $uri;
} else {
$uri = $uri . $r['opt']['reverseStr'];
}
}
$defaultParams = array_merge($defaultParams, $myDefaults);
$firstRoute = false;
}
$availableParams = array_reverse($availableParams);
return array(
'uri' => $uri,
'options' => $options,
'user_parameters' => $params,
'available_parameters' => $availableParams,
'matched_parameters' => $matchedParams,
'optional_parameters' => $optionalParams,
'default_parameters' => $defaultParams,
);
}
protected function refillAllMatchedParameters(array $options, array $params, array $matchedParams)
{
if(!empty($options['refill_all_parameters'])) {
foreach($matchedParams as $name => $value) {
if(!(isset($params[$name]) || array_key_exists($name, $params))) {
$params[$name] = $this->createValue($value, true);
}
}
}
return $params;
}
protected function refillMatchedAndDefaultParameters(array $options, array $originalUserParams, array $params, array $availableParams, array $matchedParams, array $optionalParams, array $defaultParams)
{
$refillValue = true;
$finalParams = array();
foreach($availableParams as $name) {
if($refillValue && (isset($originalUserParams[$name]) || array_key_exists($name, $originalUserParams))) {
$refillValue = false;
}
$isOptional = isset($optionalParams[$name]);
$hasMatched = isset($matchedParams[$name]);
$hasDefault = isset($defaultParams[$name]);
$hasUserCallbackParam = (isset($params[$name]) || array_key_exists($name, $params));
if($hasUserCallbackParam) {
} elseif($refillValue && $hasMatched) {
$finalParams[$name] = $this->createValue($matchedParams[$name], true);
} elseif($hasDefault) {
$default = $defaultParams[$name];
if(!$isOptional || strlen($default->getValue()) > 0) {
$finalParams[$name] = clone $default;
} elseif($isOptional) {
$finalParams[$name] = null;
}
}
}
return $finalParams;
}
protected function fillUserParameters(array $options, array $params, array $finalParams, array $availableParams, array $optionalParams, array $defaultParams)
{
$availableParamsAsKeys = array_flip($availableParams);
foreach($params as $name => $param) {
if(!(isset($finalParams[$name]) || array_key_exists($name, $finalParams))) {
if($param === null && isset($optionalParams[$name])) {
$finalParams[$name] = $param;
} else {
if(isset($defaultParams[$name])) {
if($param === null || ($param instanceof AgaviIRoutingValue && $param->getValue() === null)) {
$param = clone $defaultParams[$name];
}
$finalParams[$name] = $param;
} elseif(isset($availableParamsAsKeys[$name])) {
$finalParams[$name] = $param;
}
}
}
}
return $finalParams;
}
protected function removeMatchingDefaults(array $options, array $finalParams, array $availableParams, array $optionalParams, array $defaultParams)
{
if(!empty($options['omit_defaults'])) {
foreach(array_reverse($availableParams) as $name) {
if(isset($optionalParams[$name])) {
if(!isset($finalParams[$name]) ||
(
isset($defaultParams[$name]) &&
$finalParams[$name]->getValue() == $defaultParams[$name]->getValue() &&
(!$finalParams[$name]->hasPrefix() || $finalParams[$name]->getPrefix() == $defaultParams[$name]->getPrefix()) &&
(!$finalParams[$name]->hasPostfix() || $finalParams[$name]->getPostfix() == $defaultParams[$name]->getPostfix())
)
) {
$finalParams[$name] = null;
} else {
break;
}
} else {
break;
}
}
}
return $finalParams;
}
protected function updatePrefixAndPostfix(array $finalParams, array $defaultParams)
{
foreach($finalParams as $name => $param) {
if($param === null) {
continue;
}
if(isset($defaultParams[$name])) {
$default = $defaultParams[$name];
if(!$param->hasPrefix() && $default->hasPrefix()) {
$param->setPrefix($default->getPrefix());
}
if(!$param->hasPostfix() && $default->hasPostfix()) {
$param->setPostfix($default->getPostfix());
}
}
}
return $finalParams;
}
protected function encodeParameters(array $options, array $params)
{
foreach($params as &$param) {
$param = $this->encodeParameter($param);
}
return $params;
}
protected function encodeParameter($parameter)
{
if($parameter instanceof AgaviIRoutingValue) {
return sprintf('%s%s%s',
$parameter->getPrefixNeedsEncoding()  ? $this->escapeOutputParameter($parameter->getPrefix())  : $parameter->getPrefix(),
$parameter->getValueNeedsEncoding()   ? $this->escapeOutputParameter($parameter->getValue())   : $parameter->getValue(),
$parameter->getPostfixNeedsEncoding() ? $this->escapeOutputParameter($parameter->getPostfix()) : $parameter->getPostfix()
);
} else {
return $this->escapeOutputParameter($parameter);
}
}
protected function convertParametersToRoutingValues(array $parameters)
{
if(count($parameters)) {
foreach($parameters as &$param) {
if(!$param instanceof AgaviIRoutingValue) {
if($param !== null) {
$param = $this->createValue($param);
}
} else {
$param = clone $param;
}
}
return $parameters;
} else {
return array();
}
}
public function gen($route, array $params = array(), $options = array())
{
if(array_key_exists('prefix', $options)) {
$prefix = (string) $options['prefix'];
} else {
$prefix = $this->getPrefix();
}
$routes = $route;
$isNullRoute = false;
$routes = $this->getAffectedRoutes($route, $isNullRoute);
if(count($routes) == 0) {
return array($route, array(), $options, $params, $isNullRoute);
}
if($isNullRoute) {
$params = $this->fillGenNullParameters($routes, $params);
}
$params = $this->convertParametersToRoutingValues($params);
$originalParams = $params;
$assembledInformation = $this->assembleRoutes($options, $routes, $params);
$options = $assembledInformation['options'];
$params = $assembledInformation['user_parameters'];
$params = $this->refillAllMatchedParameters($options, $params, $assembledInformation['matched_parameters']);
$finalParams = $this->refillMatchedAndDefaultParameters($options, $originalParams, $params, $assembledInformation['available_parameters'], $assembledInformation['matched_parameters'], $assembledInformation['optional_parameters'], $assembledInformation['default_parameters']);
$finalParams = $this->fillUserParameters($options, $params, $finalParams, $assembledInformation['available_parameters'], $assembledInformation['optional_parameters'], $assembledInformation['default_parameters']);
$finalParams = $this->removeMatchingDefaults($options, $finalParams, $assembledInformation['available_parameters'], $assembledInformation['optional_parameters'], $assembledInformation['default_parameters']);
$finalParams = $this->updatePrefixAndPostfix($finalParams, $assembledInformation['default_parameters']);
$extras = array_diff_key(array_merge($originalParams, $params), $finalParams);
foreach($extras as &$extra) {
$extra = ($extra instanceof AgaviIRoutingValue) ? $extra->getValue() : $extra;
}
$params = $finalParams;
$params = $this->encodeParameters($options, $params);
$from = array();
$to = array();
foreach(array_unique($assembledInformation['available_parameters']) as $name) {
if(!isset($params[$name])) {
$from[] = '(:' . $name . ':)';
$to[] = '';
}
}
foreach($params as $n => $p) {
$from[] = '(:' . $n . ':)';
$to[] = $p;
}
$uri = str_replace($from, $to, $assembledInformation['uri']);
return array($prefix . $uri, $params, $options, $extras, $isNullRoute);
}
public function escapeOutputParameter($string)
{
return (string)$string;
}
public function execute()
{
$rq = $this->context->getRequest();
$rd = $rq->getRequestData();
$tm = $this->context->getTranslationManager();
$container = $this->context->getController()->createExecutionContainer();
if(!$this->isEnabled()) {
return $container;
}
$matchedRoutes = array();
$input = $this->input;
$vars = array();
$ot = null;
$locale = null;
$method = null;
$umap = $rq->getParameter('use_module_action_parameters');
$ma = $rq->getParameter('module_accessor');
$aa = $rq->getParameter('action_accessor');
$requestMethod = $rq->getMethod();
$routes = array();
foreach($this->routes as $name => $route) {
if(!$route['opt']['parent']) {
$routes[] = $name;
}
}
$routeStack = array($routes);
do {
$routes = array_pop($routeStack);
foreach($routes as $key) {
$route =& $this->routes[$key];
$opts =& $route['opt'];
if(count($opts['constraint']) == 0 || in_array($requestMethod, $opts['constraint'])) {
if(count($opts['callbacks']) > 0 && !isset($route['callback_instances'])) {
foreach($opts['callbacks'] as $key => $callback) {
$instance = new $callback['class']();
$instance->initialize($this->context, $route);
$instance->setParameters($callback['parameters']);
$route['callback_instances'][$key] = $instance;
}
}
$match = array();
if($this->parseInput($route, $input, $match)) {
$varsBackup = $vars;
if(count($opts['callbacks']) > 0) {
$containerBackup = $container;
$container = clone $container;
}
$ign = array();
if(count($opts['ignores']) > 0) {
$ign = array_flip($opts['ignores']);
}
foreach($opts['defaults'] as $key => $value) {
if(!isset($ign[$key]) && $value->getValue()) {
$vars[$key] = $value->getValue();
}
}
foreach($route['par'] as $param) {
if(isset($match[$param]) && $match[$param][1] != -1) {
$vars[$param] = $match[$param][0];
}
}
foreach($match as $name => $m) {
if(is_string($name) && $m[1] != -1) {
$route['matches'][$name] = $m[0];
}
}
$matchvals = array_map('reset', $match);
if($opts['module']) {
$module = AgaviToolkit::expandVariables($opts['module'], $matchvals);
$container->setModuleName($module);
if($umap) {
$vars[$ma] = $module;
}
}
if($opts['action']) {
$action = AgaviToolkit::expandVariables($opts['action'], $matchvals);
$container->setActionName($action);
if($umap) {
$vars[$aa] = $action;
}
}
if($opts['output_type']) {
$ot = AgaviToolkit::expandVariables($opts['output_type'], $matchvals);
try {
$container->setOutputType($this->context->getController()->getOutputType($ot));
} catch(AgaviException $e) {
}
}
if($opts['locale']) {
$localeBackup = $tm->getCurrentLocaleIdentifier();
if($locale = AgaviToolkit::expandVariables($opts['locale'], $matchvals)) {
try {
$tm->setLocale($locale);
} catch(AgaviException $e) {
}
}
} else {
$localeBackup = null;
}
if($opts['method']) {
if($method = AgaviToolkit::expandVariables($opts['method'], $matchvals)) {
$rq->setMethod($method);
$container->setRequestMethod($method);
}
}
if(count($opts['callbacks']) > 0) {
if(count($opts['ignores']) > 0) {
foreach($vars as $name => &$var) {
$vars[$name] =& $var;
}
foreach($opts['ignores'] as $ignore) {
if(isset($match[$ignore]) && $match[$ignore][1] != -1) {
$vars[$ignore] = $match[$ignore][0];
}
}
}
$callbackSuccess = true;
foreach($route['callback_instances'] as $callbackInstance) {
if($callbackSuccess) {
$oldModule = $container->getModuleName();
$oldAction = $container->getActionName();
$oldOutputTypeName = $container->getOutputType() ? $container->getOutputType()->getName() : null;
if(null === $tm) {
$oldLocale = null;
} else {
$oldLocale = $tm->getCurrentLocaleIdentifier();
}
$oldRequestMethod = $rq->getMethod();
$oldContainerMethod = $container->getRequestMethod();
$onMatched = $callbackInstance->onMatched($vars, $container);
if($onMatched instanceof AgaviResponse) {
return $onMatched;
}
if(!$onMatched) {
$callbackSuccess = false;
$route['matches'] = array();
$vars = $varsBackup;
$container = $containerBackup;
if(isset($localeBackup)) {
$tm->setLocale($localeBackup);
}
$rq->setMethod($container->getRequestMethod());
}
}
if(!$callbackSuccess) {
$onNotMatched = $callbackInstance->onNotMatched($container);
if($onNotMatched instanceof AgaviResponse) {
return $onNotMatched;
}
continue;
}
$expandVars = $vars;
$routeParamsAsKey = array_flip($route['par']);
foreach($expandVars as $name => $value) {
if(!isset($routeParamsAsKey[$name]) && array_key_exists($name, $varsBackup)) {
unset($expandVars[$name]);
}
}
if($opts['module'] && $oldModule == $container->getModuleName() && (!$umap || !array_key_exists($ma, $vars) || $oldModule == $vars[$ma])) {
$module = AgaviToolkit::expandVariables($opts['module'], $expandVars);
$container->setModuleName($module);
if($umap) {
$vars[$ma] = $module;
}
}
if($opts['action'] && $oldAction == $container->getActionName() && (!$umap || !array_key_exists($aa, $vars) || $oldAction == $vars[$aa])) {
$action = AgaviToolkit::expandVariables($opts['action'], $expandVars);
$container->setActionName($action);
if($umap) {
$vars[$aa] = $action;
}
}
if($opts['output_type'] && $oldOutputTypeName == ($container->getOutputType() ? $container->getOutputType()->getName() : null)) {
$ot = AgaviToolkit::expandVariables($opts['output_type'], $expandVars);
$container->setOutputType($this->context->getController()->getOutputType($ot));
}
if($opts['locale'] && $oldLocale == $tm->getCurrentLocaleIdentifier()) {
if($locale = AgaviToolkit::expandVariables($opts['locale'], $expandVars)) {
$tm->setLocale($locale);
}
}
if($opts['method']) {
if($oldRequestMethod == $rq->getMethod() && $oldContainerMethod == $container->getRequestMethod()) {
if($method = AgaviToolkit::expandVariables($opts['method'], $expandVars)) {
$rq->setMethod($method);
$container->setRequestMethod($method);
}
} elseif($oldContainerMethod != $container->getRequestMethod()) {
$rq->setMethod($container->getRequestMethod());
} elseif($oldRequestMethod != $rq->getMethod()) {
$container->setRequestMethod($rq->getMethod());
}
}
if($umap && $oldModule == $container->getModuleName() && array_key_exists($ma, $vars) && $vars[$ma] != $oldModule) {
$container->setModuleName($vars[$ma]);
}
if($umap && $oldAction == $container->getActionName() && array_key_exists($aa, $vars) && $vars[$aa] != $oldAction) {
$container->setActionName($vars[$aa]);
}
}
if(!$callbackSuccess) {
continue;
} else {
foreach($opts['ignores'] as $ignore) {
if(array_key_exists($ignore, $varsBackup)) {
$vars[$ignore] = $varsBackup[$ignore];
} else {
unset($vars[$ignore]);
}
}
}
}
$matchedRoutes[] = $opts['name'];
if($opts['cut'] || (count($opts['childs']) && $opts['cut'] === null)) {
if($route['opt']['source'] !== null) {
$s =& $this->sources[$route['opt']['source']];
} else {
$s =& $input;
}
$ni = '';
if($match[0][1] > 0) {
$ni = substr($s, 0, $match[0][1]);
}
$ni .= substr($s, $match[0][1] + strlen($match[0][0]));
$s = $ni;
}
if(count($opts['childs'])) {
$routeStack[] = $opts['childs'];
break;
}
if($opts['stop']) {
break;
}
} else {
if(count($opts['callbacks']) > 0) {
foreach($route['callback_instances'] as $callbackInstance) {
$onNotMatched = $callbackInstance->onNotMatched($container);
if($onNotMatched instanceof AgaviResponse) {
return $onNotMatched;
}
}
}
}
}
}
} while(count($routeStack) > 0);
$rd->setParameters($vars);
if($container->getModuleName() === null || $container->getActionName() === null) {
$container->setModuleName(AgaviConfig::get('actions.error_404_module'));
$container->setActionName(AgaviConfig::get('actions.error_404_action'));
if($umap) {
$rd->setParameters(array(
$ma => $container->getModuleName(),
$aa => $container->getActionName(),
));
}
}
$rq->setAttribute('matched_routes', $matchedRoutes, 'org.agavi.routing');
return $container;
}
protected function parseInput(array $route, $input, &$matches)
{
if($route['opt']['source'] !== null) {
$parts = AgaviArrayPathDefinition::getPartsFromPath($route['opt']['source']);
$partArray = $parts['parts'];
$count = count($partArray);
if($count > 0 && isset($this->sources[$partArray[0]])) {
$input = $this->sources[$partArray[0]];
if($count > 1) {
array_shift($partArray);
if(is_array($input)) {
$input = AgaviArrayPathDefinition::getValue($partArray, $input);
} elseif($input instanceof AgaviIRoutingSource) {
$input = $input->getSource($partArray);
}
}
}
}
return preg_match($route['rxp'], $input, $matches, PREG_OFFSET_CAPTURE);
}
protected function parseRouteString($str)
{
$vars = array();
$rxStr = '';
$reverseStr = '';
$anchor = 0;
$anchor |= (substr($str, 0, 1) == '^') ? self::ANCHOR_START : 0;
$anchor |= (substr($str, -1) == '$') ? self::ANCHOR_END : 0;
$str = substr($str, (int)$anchor & self::ANCHOR_START, $anchor & self::ANCHOR_END ? -1 : strlen($str));
$rxChars = implode('', array('.', '\\', '+', '*', '?', '[', '^', ']', '$', '(', ')', '{', '}', '=', '!', '<', '>', '|', ':'));
$len = strlen($str);
$state = 'start';
$tmpStr = '';
$inEscape = false;
$rxName = '';
$rxInner = '';
$rxPrefix = '';
$rxPostfix = '';
$parenthesisCount = 0;
$bracketCount = 0;
$hasBrackets = false;
$cleanRx = true;
for($i = 0; $i < $len; ++$i) {
$atEnd = $i + 1 == $len;
$c = $str[$i];
if(!$atEnd && !$inEscape && $c == '\\') {
$cNext = $str[$i + 1];
if(
($cNext == '\\') ||
($state == 'start' && $cNext == '(') ||
($state == 'rxStart' && in_array($cNext, array('(',')','{','}')))
) {
$inEscape = true;
continue;
}
if($state == 'afterRx' && $cNext == '?') {
$inEscape = false;
$state = 'start';
continue;
}
} elseif($inEscape) {
$tmpStr .= $c;
$inEscape = false;
continue;
}
if($state == 'start') {
if($c == '(') {
$rxStr .= preg_quote($tmpStr, '#');
$reverseStr .= $tmpStr;
$tmpStr = '';
$state = 'rxStart';
$rxName = $rxInner = $rxPrefix = $rxPostfix = '';
$parenthesisCount = 1;
$bracketCount = 0;
$hasBrackets = false;
} else {
$tmpStr .= $c;
}
if($atEnd) {
$rxStr .= preg_quote($tmpStr, '#');
$reverseStr .= $tmpStr;
}
} elseif($state == 'rxStart') {
if($c == '{') {
++$bracketCount;
if($bracketCount == 1) {
$hasBrackets = true;
$rxPrefix = $tmpStr;
$tmpStr = '';
} else {
$tmpStr .= $c;
}
} elseif($c == '}') {
--$bracketCount;
if($bracketCount == 0) {
list($rxName, $rxInner) = $this->parseParameterDefinition($tmpStr);
$tmpStr = '';
} else {
$tmpStr .= $c;
}
} elseif($c == '(') {
++$parenthesisCount;
$tmpStr .= $c;
} elseif($c == ')') {
--$parenthesisCount;
if($parenthesisCount > 0) {
$tmpStr .= $c;
} else {
if($parenthesisCount < 0) {
throw new AgaviException('The pattern ' . $str . ' contains an unbalanced set of parentheses!');
}
if(!$hasBrackets) {
list($rxName, $rxInner) = $this->parseParameterDefinition($tmpStr);
} else {
if($bracketCount != 0) {
throw new AgaviException('The pattern ' . $str . ' contains an unbalanced set of brackets!');
}
$rxPostfix = $tmpStr;
}
if(!$rxName) {
$myRx = $rxPrefix . $rxInner . $rxPostfix;
if(strpbrk($myRx, $rxChars) === false) {
$reverseStr .= $myRx;
}
$rxStr .= str_replace('#', '\#', sprintf('(%s)', $myRx));
} else {
$rxStr .= str_replace('#', '\#', sprintf('(%s(?P<%s>%s)%s)', $rxPrefix, $rxName, $rxInner, $rxPostfix));
$reverseStr .= sprintf('(:%s:)', $rxName);
if(!isset($vars[$rxName])) {
if(strpbrk($rxPrefix, $rxChars) !== false) {
$rxPrefix = '';
}
if(strpbrk($rxInner, $rxChars) !== false) {
$rxInner = '';
}
if(strpbrk($rxPostfix, $rxChars) !== false) {
$rxPostfix = '';
}
$vars[$rxName] = array('pre' => $rxPrefix, 'val' => $rxInner, 'post' => $rxPostfix, 'is_optional' => false);
}
}
$tmpStr = '';
$state = 'afterRx';
}
} else {
$tmpStr .= $c;
}
if($atEnd && $parenthesisCount != 0) {
throw new AgaviException('The pattern ' . $str . ' contains an unbalanced set of parentheses!');
}
} elseif($state == 'afterRx') {
if($c == '?') {
if(isset($vars[$rxName])) {
$vars[$rxName]['is_optional'] = true;
}
$rxStr .= $c;
} else {
--$i;
}
$state = 'start';
}
}
$rxStr = sprintf('#%s%s%s#', $anchor & self::ANCHOR_START ? '^' : '', $rxStr, $anchor & self::ANCHOR_END ? '$' : '');
return array($rxStr, $reverseStr, $vars, $anchor);
}
protected function parseParameterDefinition($def)
{
$name = '';
$rx = '';
preg_match('#([a-z0-9_-]+:)?(.*)#i', $def, $match);
return array(substr($match[1], 0, -1), $match[2]);
}
public function createValue($value, $valueNeedsEncoding = true)
{
$value = new AgaviRoutingValue($value, $valueNeedsEncoding);
$value->initialize($this->context);
return $value;
}
}
abstract class AgaviStorage extends AgaviParameterHolder
{
protected $context = null;
public final function getContext()
{
return $this->context;
}
public function initialize(AgaviContext $context, array $parameters = array())
{
$this->context = $context;
$this->setParameters($parameters);
}
public function startup()
{
}
abstract function read($key);
abstract function remove($key);
abstract function shutdown();
abstract function write($key, $data);
}
class AgaviUser extends AgaviAttributeHolder
{
protected $context = null;
protected $storageNamespace = 'org.agavi.user.User';
public final function getContext()
{
return $this->context;
}
public function getStorageNamespace()
{
return $this->storageNamespace;
}
public function initialize(AgaviContext $context, array $parameters = array())
{
$this->context = $context;
if(isset($parameters['default_namespace'])) {
$this->defaultNamespace = $parameters['default_namespace'];
}
if(isset($parameters['storage_namespace'])) {
$this->storageNamespace = $parameters['storage_namespace'];
}
$this->setParameters($parameters);
$this->attributes = $context->getStorage()->read($this->storageNamespace);
if($this->attributes == null) {
$this->attributes = array();
}
}
public function startup()
{
}
public function shutdown()
{
$this->getContext()->getStorage()->write($this->storageNamespace, $this->attributes);
}
}
abstract class AgaviTemplateLayer extends AgaviParameterHolder
{
protected $context = null;
protected $renderer = null;
protected $slots = array();
public function __construct(array $parameters = array())
{
parent::__construct(array_merge($parameters, array(
'module' => null,
'template' => null,
)));
}
public function __call($name, array $args)
{
$matches = array();
if(preg_match('/^(has|get|set|remove)(.+)$/', $name, $matches)) {
$method = $matches[1] . 'Parameter';
$parameter = strtolower(preg_replace('/((?<!\A)[A-Z])/u', '_$1', $matches[2]));
return call_user_func_array(array($this, $method), array_merge(array($parameter), $args));
}
}
public function __sleep()
{
$this->contextName = $this->context->getName();
$arr = get_object_vars($this);
unset($arr['context']);
return array_keys($arr);
}
public function __wakeup()
{
$this->context = AgaviContext::getInstance($this->contextName);
unset($this->contextName);
}
public function __clone()
{
foreach($this->slots as &$slot) {
$slot = clone $slot;
}
}
public function execute(AgaviRenderer $renderer = null, array &$attributes = array(), array &$moreAssigns = array())
{
$output = array();
foreach($this->getSlots() as $slotName => $slotContainer) {
$slotResponse = $slotContainer->execute();
$output[$slotName] = $slotResponse->getContent();
}
if($renderer === null) {
$renderer = $this->getRenderer();
}
if(!($renderer instanceof AgaviRenderer)) {
throw new AgaviException('No renderer has been set or given.');
}
return $renderer->render($this, $attributes, $output, $moreAssigns);
}
public function initialize(AgaviContext $context, array $parameters = array())
{
$this->context = $context;
$this->setParameters($parameters);
}
public function setRenderer(AgaviRenderer $renderer)
{
$this->renderer = $renderer;
}
public function getRenderer()
{
return $this->renderer;
}
public function setSlot($name, AgaviExecutionContainer $c)
{
$this->slots[$name] = $c;
}
public function getSlot($name)
{
if(isset($this->slots[$name])) {
return $this->slots[$name];
}
}
public function getSlots()
{
return $this->slots;
}
public function hasSlot($name)
{
return isset($this->slots[$name]);
}
public function hasSlots()
{
return (count($this->slots) > 0);
}
public function removeSlot($name)
{
if(isset($this->slots[$name])) {
unset($this->slots[$name]);
}
}
abstract public function getResourceStreamIdentifier();
}
abstract class AgaviView
{
const NONE = null;
protected $container = null;
protected $context = null;
protected $layers = array();
abstract function execute(AgaviRequestDataHolder $rd);
public final function getContext()
{
return $this->context;
}
public final function getContainer()
{
return $this->container;
}
public final function getResponse()
{
return $this->container->getResponse();
}
public function initialize(AgaviExecutionContainer $container)
{
$this->container = $container;
$this->context = $container->getContext();
}
public function createLayer($class, $name, $renderer = null)
{
$layer = new $class();
if(!is_subclass_of($layer, 'AgaviTemplateLayer')) {
throw new AgaviViewException('Class "$class" is not a subclass of AgaviTemplateLayer');
}
$layer->initialize($this->context, array('name' => $name, 'module' => $this->container->getViewModuleName(), 'template' => $this->container->getViewName(), 'output_type' => $this->container->getOutputType()->getName()));
if($renderer instanceof AgaviRenderer) {
$layer->setRenderer($renderer);
} else {
$layer->setRenderer($this->container->getOutputType()->getRenderer($renderer));
}
return $layer;
}
public function appendLayer(AgaviTemplateLayer $layer, AgaviTemplateLayer $otherLayer = null)
{
if($otherLayer !== null && !in_array($otherLayer, $this->layers, true)) {
throw new AgaviViewException('Layer "' . $otherLayer->getName() . '" not in list');
}
if(($pos = array_search($layer, $this->layers, true)) !== false) {
array_splice($this->layers, $pos, 1);
}
if($otherLayer === null) {
$dest = count($this->layers);
} elseif($otherLayer === $layer) {
$dest = $pos;
} else {
$dest = array_search($otherLayer, $this->layers, true) + 1;
}
array_splice($this->layers, $dest, 0, array($layer));
return $layer;
}
public function prependLayer(AgaviTemplateLayer $layer, AgaviTemplateLayer $otherLayer = null)
{
if($otherLayer !== null && !in_array($otherLayer, $this->layers, true)) {
throw new AgaviViewException('Layer "' . $otherLayer->getName() . '" not in list');
}
if(($pos = array_search($layer, $this->layers, true)) !== false) {
array_splice($this->layers, $pos, 1);
}
if($otherLayer === null) {
$dest = 0;
} elseif($otherLayer === $layer) {
$dest = $pos;
} else {
$dest = array_search($otherLayer, $this->layers, true);
}
array_splice($this->layers, $dest, 0, array($layer));
return $layer;
}
public function removeLayer(AgaviTemplateLayer $layer)
{
if(($pos = array_search($layer, $this->layers, true)) === false) {
throw new AgaviViewException('Layer "' . $layer->getName() . '" not in list');
}
array_splice($this->layers, $pos, 1);
}
public function clearLayers()
{
$this->layers = array();
}
public function getLayer($name)
{
foreach($this->layers as $layer) {
if($name == $layer->getName()) {
return $layer;
}
}
}
public function getLayers()
{
return $this->layers;
}
public function loadLayout($layoutName = null)
{
$layout = $this->container->getOutputType()->getLayout($layoutName);
$this->clearLayers();
foreach($layout['layers'] as $name => $layer) {
$l = $this->createLayer($layer['class'], $name, $layer['renderer']);
$l->setParameters($layer['parameters']);
foreach($layer['slots'] as $slotName => $slot) {
$l->setSlot($slotName, $this->createSlotContainer($slot['module'], $slot['action'], $slot['parameters'], $slot['output_type'], $slot['request_method']));
}
$this->appendLayer($l);
}
return $layout['parameters'];
}
public function createSlotContainer($moduleName, $actionName, $arguments = null, $outputType = null, $requestMethod = null)
{
if($arguments !== null && !($arguments instanceof AgaviRequestDataHolder)) {
$rdhc = $this->context->getRequest()->getParameter('request_data_holder_class');
$arguments = new $rdhc(array(AgaviRequestDataHolder::SOURCE_PARAMETERS => $arguments));
}
$container = $this->container->createExecutionContainer($moduleName, $actionName, $arguments, $outputType, $requestMethod);
$container->setParameter('is_slot', true);
$container->removeParameter('is_forward');
return $container;
}
public function createForwardContainer($moduleName, $actionName, $arguments = null, $outputType = null, $requestMethod = null)
{
if($arguments !== null) {
if(!($arguments instanceof AgaviRequestDataHolder)) {
$rdhc = $this->context->getRequest()->getParameter('request_data_holder_class');
$arguments = new $rdhc(array(AgaviRequestDataHolder::SOURCE_PARAMETERS => $arguments));
}
} else {
$arguments = $this->container->getArguments();
}
$container = $this->container->createExecutionContainer($moduleName, $actionName, $arguments, $outputType, $requestMethod);
$container->setParameter('is_forward', true);
return $container;
}
public function clearAttributes()
{
$this->container->clearAttributes();
}
public function &getAttribute($name, $default = null)
{
return $this->container->getAttribute($name, null, $default);
}
public function getAttributeNames()
{
return $this->container->getAttributeNames();
}
public function &getAttributes()
{
return $this->container->getAttributes();
}
public function hasAttribute($name)
{
return $this->container->hasAttribute($name);
}
public function &removeAttribute($name)
{
return $this->container->removeAttribute($name);
}
public function setAttribute($name, $value)
{
$this->container->setAttribute($name, $value);
}
public function appendAttribute($name, $value)
{
$this->container->appendAttribute($name, $value);
}
public function setAttributeByRef($name, &$value)
{
$this->container->setAttributeByRef($name, $value);
}
public function appendAttributeByRef($name, &$value)
{
$this->container->appendAttributeByRef($name, $value);
}
public function setAttributes(array $attributes)
{
$this->container->setAttributes($attributes);
}
public function setAttributesByRef(array &$attributes)
{
$this->container->setAttributesByRef($attributes);
}
}
class AppKitAgaviContext extends AgaviContext {
public function initialize() {
AppKitAgaviUtil::initContext($this);
$this->buildVersionString();
$this->initializePhpSettings();
$this->initializeModules();
parent::initialize();
$this->initializeAutosettings();
$this->initializeExceptionHandling();
}
private function initializeExceptionHandling() {
AppKitExceptionHandler::initializeHandler();
}
private function initializeModules() {
$list = array();
$module_dir = AgaviToolKit::literalize("%core.module_dir%");
$files = scandir($module_dir);
AppKitAgaviUtil::initializeModule('AppKit');
foreach($files as $file) {
if($file == '.' || $file == '..')
continue;
if(!is_dir($module_dir."/".$file) || !is_readable($module_dir."/".$file))
continue;
$list[] = $file;
}
foreach($list as $mod_name) {
try {
if($mod_name != 'AppKit' && $mod_name != 'TestDummy')
AppKitAgaviUtil::initializeModule($mod_name);
} catch(AgaviDisabledModuleException $e) {
}
}
}
private function initializeAutosettings() {
if (AgaviConfig::get('core.default_context') =='web') {
if (AgaviConfig::get('org.icinga.appkit.web_path', null) == null) {
AgaviConfig::set('org.icinga.appkit.web_path', AppKitStringUtil::extractWebPath(), true, true);
}
}
include AgaviConfigCache::checkConfig(AgaviToolkit::expandDirectives('%core.config_dir%/schedules.xml'));
AgaviConfig::set('core.tmp_dir', AgaviConfig::get('core.data_dir'). '/tmp');
}
private function buildVersionString() {
if (AgaviConfig::get('org.icinga.version.extension', false) == false) {
$version_format = "%s/v%d.%d.%d";
} else {
$version_format = "%s/v%d.%d.%d-%s";
}
AgaviConfig::set('org.icinga.version.release', sprintf(
$version_format,
AgaviConfig::get('org.icinga.version.name'),
AgaviConfig::get('org.icinga.version.major'),
AgaviConfig::get('org.icinga.version.minor'),
AgaviConfig::get('org.icinga.version.patch'),
AgaviConfig::get('org.icinga.version.extension')
), true, true);
}
private function initializePhpSettings() {
if (is_array($settings = AgaviConfig::get('modules.appkit.php_settings'))) {
foreach($settings as $ini_key=>$ini_val) {
if (ini_set($ini_key, $ini_val) === false) {
throw new AppKitException("Could not set ini setting $ini_key to '$ini_val'");
}
}
}
}
}

?>