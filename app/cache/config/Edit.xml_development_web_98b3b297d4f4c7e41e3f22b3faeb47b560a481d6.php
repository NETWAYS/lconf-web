<?php

// This is a compiled Agavi configuration file
// Compiled from: /usr/local/lconf-standalone/app/modules/AppKit/validate/Admin/Users/Edit.xml
// Generated by: AgaviValidatorConfigHandler
// Date: 2011-09-02T13:08:04+0000

if($method == 'read') {
${'_validator_user_id'} = new AgaviRegexValidator();
${'_validator_user_id'}->initialize($this->getContext(), array (
  'match' => true,
  'severity' => 'error',
  'required' => false,
  'class' => 'regex',
  'name' => 'user_id',
  'pattern' => '@^\\d+|new$@',
), array (
  0 => 'id',
), array (
));
${'validationManager'}->addChild(${'_validator_user_id'});
${'_validator_container'} = new AgaviStringValidator();
${'_validator_container'}->initialize($this->getContext(), array (
  'min' => '1',
  'severity' => 'error',
  'required' => false,
  'class' => 'string',
  'name' => 'container',
), array (
  0 => 'container',
), array (
  '' => 'Validation of parameter \'container\' failed!',
));
${'validationManager'}->addChild(${'_validator_container'});
}
if($method == 'write') {
${'_validator_user_id'} = new AgaviRegexValidator();
${'_validator_user_id'}->initialize($this->getContext(), array (
  'match' => true,
  'severity' => 'error',
  'required' => false,
  'class' => 'regex',
  'name' => 'user_id',
  'pattern' => '@^\\d+|new$@',
), array (
  0 => 'id',
), array (
));
${'validationManager'}->addChild(${'_validator_user_id'});
${'_validator_userroles'} = new AgaviNumberValidator();
${'_validator_userroles'}->initialize($this->getContext(), array (
  'type' => 'int',
  'severity' => 'error',
  'required' => false,
  'class' => 'number',
  'name' => 'userroles',
  'base' => 'userroles[]',
), array (
  0 => '',
), array (
));
${'validationManager'}->addChild(${'_validator_userroles'});
${'_validator_principal_value'} = new AgaviStringValidator();
${'_validator_principal_value'}->initialize($this->getContext(), array (
  'min' => '1',
  'severity' => 'error',
  'required' => false,
  'class' => 'string',
  'name' => 'principal_value',
  'base' => 'principal_value[][][]',
), array (
  0 => '',
), array (
  '' => 'Principal validation failed!',
));
${'validationManager'}->addChild(${'_validator_principal_value'});
${'_validator_principal_target'} = new AgaviStringValidator();
${'_validator_principal_target'}->initialize($this->getContext(), array (
  'min' => '1',
  'severity' => 'error',
  'required' => false,
  'class' => 'string',
  'name' => 'principal_target',
  'base' => 'principal_target[][][]',
), array (
  0 => '',
), array (
  '' => 'Principal validation failed!',
));
${'validationManager'}->addChild(${'_validator_principal_target'});
${'_validator_user_name'} = new AgaviStringValidator();
${'_validator_user_name'}->initialize($this->getContext(), array (
  'min' => '3',
  'severity' => 'error',
  'required' => true,
  'class' => 'string',
  'name' => 'user_name',
  'max' => '127',
), array (
  0 => 'user_name',
), array (
  'min' => 'The username you supplied is fewer than 3 characters long.',
  'max' => 'Your username is too long',
  '' => 'You have to supply a username!',
));
${'validationManager'}->addChild(${'_validator_user_name'});
${'_validator_user_firstname'} = new AgaviStringValidator();
${'_validator_user_firstname'}->initialize($this->getContext(), array (
  'min' => '3',
  'severity' => 'error',
  'required' => true,
  'class' => 'string',
  'name' => 'user_firstname',
  'max' => '40',
), array (
  0 => 'user_firstname',
), array (
  'min' => 'The firstname you supplied is fewer than 3 characters long.',
  'max' => 'Your firstname is too long',
  '' => 'You have to supply a firstname!',
));
${'validationManager'}->addChild(${'_validator_user_firstname'});
${'_validator_user_lastname'} = new AgaviStringValidator();
${'_validator_user_lastname'}->initialize($this->getContext(), array (
  'min' => '3',
  'severity' => 'error',
  'required' => true,
  'class' => 'string',
  'name' => 'user_lastname',
  'max' => '40',
), array (
  0 => 'user_lastname',
), array (
  'min' => 'The lastname you supplied is fewer than 3 characters long.',
  'max' => 'Your lastname is too long',
  '' => 'You have to supply a lastname!',
));
${'validationManager'}->addChild(${'_validator_user_lastname'});
${'_validator_user_authsrc'} = new AgaviStringValidator();
${'_validator_user_authsrc'}->initialize($this->getContext(), array (
  'min' => '3',
  'severity' => 'error',
  'required' => false,
  'class' => 'string',
  'name' => 'user_authsrc',
  'max' => '40',
), array (
  0 => 'user_authsrc',
), array (
  'min' => 'The lastname you supplied is fewer than 3 characters long.',
  'max' => 'Your lastname is too long',
  '' => 'You have to supply a lastname!',
));
${'validationManager'}->addChild(${'_validator_user_authsrc'});
${'_validator_user_authkey'} = new AgaviStringValidator();
${'_validator_user_authkey'}->initialize($this->getContext(), array (
  'min' => '3',
  'severity' => 'error',
  'required' => false,
  'class' => 'string',
  'name' => 'user_authkey',
  'max' => '40',
), array (
  0 => 'user_authkey',
), array (
  'min' => 'The lastname you supplied is fewer than 3 characters long.',
  'max' => 'Your lastname is too long',
  '' => 'You have to supply a lastname!',
));
${'validationManager'}->addChild(${'_validator_user_authkey'});
${'_validator_user_email'} = new AgaviEmailValidator();
${'_validator_user_email'}->initialize($this->getContext(), array (
  'severity' => 'error',
  'required' => true,
  'class' => 'email',
  'name' => 'user_email',
), array (
  0 => 'user_email',
), array (
  '' => 'You have to supply a valid email address!',
));
${'validationManager'}->addChild(${'_validator_user_email'});
${'_validator_4e60d534354f77.42043632'} = new AgaviOroperatorValidator();
${'_validator_4e60d534354f77.42043632'}->initialize($this->getContext(), array (
  'break' => true,
  'severity' => 'error',
  'required' => true,
  'class' => 'or',
  'name' => '4e60d534354f77.42043632',
), array (
), array (
));
${'validationManager'}->addChild(${'_validator_4e60d534354f77.42043632'});
${'_validator_4e60d534359ce1.99294009'} = new AgaviNumberValidator();
${'_validator_4e60d534359ce1.99294009'}->initialize($this->getContext(), array (
  'type' => 'int',
  'severity' => 'error',
  'required' => false,
  'class' => 'number',
  'name' => '4e60d534359ce1.99294009',
), array (
  0 => 'user_disabled',
), array (
));
${'_validator_4e60d534354f77.42043632'}->addChild(${'_validator_4e60d534359ce1.99294009'});
${'_validator_4e60d53435ea42.80732643'} = new AgaviSetValidator();
${'_validator_4e60d53435ea42.80732643'}->initialize($this->getContext(), array (
  'severity' => 'error',
  'required' => false,
  'class' => 'set',
  'name' => '4e60d53435ea42.80732643',
  'export' => 'user_disabled',
  'value' => '0',
), array (
), array (
));
${'_validator_4e60d534354f77.42043632'}->addChild(${'_validator_4e60d53435ea42.80732643'});
${'_validator_password'} = new AgaviStringValidator();
${'_validator_password'}->initialize($this->getContext(), array (
  'min' => '6',
  'severity' => 'error',
  'required' => false,
  'class' => 'string',
  'name' => 'password',
  'provides' => 'password',
  'max' => '20',
), array (
  0 => 'password',
), array (
  'min' => 'The password you supplied is fewer than 6 characters long.',
  'max' => 'Your password is too long',
  '' => 'You have to supply a password!',
));
${'validationManager'}->addChild(${'_validator_password'});
${'_validator_4e60d53436d518.11088311'} = new AgaviAndoperatorValidator();
${'_validator_4e60d53436d518.11088311'}->initialize($this->getContext(), array (
  'break' => true,
  'severity' => 'error',
  'required' => true,
  'class' => 'and',
  'depends' => 'password',
  'name' => '4e60d53436d518.11088311',
), array (
), array (
));
${'validationManager'}->addChild(${'_validator_4e60d53436d518.11088311'});
${'_validator_password_validate'} = new AgaviStringValidator();
${'_validator_password_validate'}->initialize($this->getContext(), array (
  'min' => '6',
  'severity' => 'error',
  'required' => true,
  'class' => 'string',
  'name' => 'password_validate',
  'max' => '20',
), array (
  0 => 'password_validate',
), array (
  'min' => 'The password you supplied is fewer than 6 characters long.',
  'max' => 'Your password is too long',
  '' => 'You have to supply a password validate string!',
));
${'_validator_4e60d53436d518.11088311'}->addChild(${'_validator_password_validate'});
${'_validator_password_equals'} = new AgaviEqualsValidator();
${'_validator_password_equals'}->initialize($this->getContext(), array (
  'severity' => 'error',
  'required' => true,
  'class' => 'equals',
  'name' => 'password_equals',
  'value' => 'password',
  'asparam' => true,
), array (
  0 => 'password_validate',
), array (
  '' => 'Password and the validate string did not match!',
));
${'_validator_4e60d53436d518.11088311'}->addChild(${'_validator_password_equals'});
}

?>